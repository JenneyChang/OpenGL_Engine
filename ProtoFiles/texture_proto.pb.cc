// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texture_proto.proto

#include "texture_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR texture_proto_mssg::texture_proto_mssg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.magfilter_)*/0
  , /*decltype(_impl_.minfilter_)*/0
  , /*decltype(_impl_.wraps_)*/0
  , /*decltype(_impl_.wrapt_)*/0
  , /*decltype(_impl_.pixeltype_)*/0
  , /*decltype(_impl_.eformat_)*/0
  , /*decltype(_impl_.ncomponent_)*/0
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.as_is_)*/false
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.component_)*/0u
  , /*decltype(_impl_.bits_)*/0u
  , /*decltype(_impl_.datasize_)*/0u
  , /*decltype(_impl_.hash_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct texture_proto_mssgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR texture_proto_mssgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~texture_proto_mssgDefaultTypeInternal() {}
  union {
    texture_proto_mssg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 texture_proto_mssgDefaultTypeInternal _texture_proto_mssg_default_instance_;
bool texture_proto_mssg_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_TYPE_strings[5] = {};

static const char texture_proto_mssg_TYPE_names[] =
  "BMP"
  "GIF"
  "JPEG"
  "PNG"
  "TGA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_TYPE_entries[] = {
  { {texture_proto_mssg_TYPE_names + 0, 3}, 2 },
  { {texture_proto_mssg_TYPE_names + 3, 3}, 3 },
  { {texture_proto_mssg_TYPE_names + 6, 4}, 0 },
  { {texture_proto_mssg_TYPE_names + 10, 3}, 1 },
  { {texture_proto_mssg_TYPE_names + 13, 3}, 4 },
};

static const int texture_proto_mssg_TYPE_entries_by_number[] = {
  2, // 0 -> JPEG
  3, // 1 -> PNG
  0, // 2 -> BMP
  1, // 3 -> GIF
  4, // 4 -> TGA
};

const std::string& texture_proto_mssg_TYPE_Name(
    texture_proto_mssg_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_TYPE_entries,
          texture_proto_mssg_TYPE_entries_by_number,
          5, texture_proto_mssg_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_TYPE_entries,
      texture_proto_mssg_TYPE_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_TYPE_strings[idx].get();
}
bool texture_proto_mssg_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_TYPE_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_TYPE texture_proto_mssg::JPEG;
constexpr texture_proto_mssg_TYPE texture_proto_mssg::PNG;
constexpr texture_proto_mssg_TYPE texture_proto_mssg::BMP;
constexpr texture_proto_mssg_TYPE texture_proto_mssg::GIF;
constexpr texture_proto_mssg_TYPE texture_proto_mssg::TGA;
constexpr texture_proto_mssg_TYPE texture_proto_mssg::TYPE_MIN;
constexpr texture_proto_mssg_TYPE texture_proto_mssg::TYPE_MAX;
constexpr int texture_proto_mssg::TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool texture_proto_mssg_MAG_FILTER_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_MAG_FILTER_strings[2] = {};

static const char texture_proto_mssg_MAG_FILTER_names[] =
  "MAG_LINEAR"
  "MAG_NEAREST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_MAG_FILTER_entries[] = {
  { {texture_proto_mssg_MAG_FILTER_names + 0, 10}, 1 },
  { {texture_proto_mssg_MAG_FILTER_names + 10, 11}, 0 },
};

static const int texture_proto_mssg_MAG_FILTER_entries_by_number[] = {
  1, // 0 -> MAG_NEAREST
  0, // 1 -> MAG_LINEAR
};

const std::string& texture_proto_mssg_MAG_FILTER_Name(
    texture_proto_mssg_MAG_FILTER value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_MAG_FILTER_entries,
          texture_proto_mssg_MAG_FILTER_entries_by_number,
          2, texture_proto_mssg_MAG_FILTER_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_MAG_FILTER_entries,
      texture_proto_mssg_MAG_FILTER_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_MAG_FILTER_strings[idx].get();
}
bool texture_proto_mssg_MAG_FILTER_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_MAG_FILTER* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_MAG_FILTER_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_MAG_FILTER>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_MAG_FILTER texture_proto_mssg::MAG_NEAREST;
constexpr texture_proto_mssg_MAG_FILTER texture_proto_mssg::MAG_LINEAR;
constexpr texture_proto_mssg_MAG_FILTER texture_proto_mssg::MAG_FILTER_MIN;
constexpr texture_proto_mssg_MAG_FILTER texture_proto_mssg::MAG_FILTER_MAX;
constexpr int texture_proto_mssg::MAG_FILTER_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool texture_proto_mssg_MIN_FILTER_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_MIN_FILTER_strings[6] = {};

static const char texture_proto_mssg_MIN_FILTER_names[] =
  "MIN_LINEAR"
  "MIN_LINEAR_MIPMAP_LINEAR"
  "MIN_LINEAR_MIPMAP_NEAREST"
  "MIN_NEAREST"
  "MIN_NEAREST_MIPMAP_LINEAR"
  "MIN_NEAREST_MIPMAP_NEAREST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_MIN_FILTER_entries[] = {
  { {texture_proto_mssg_MIN_FILTER_names + 0, 10}, 1 },
  { {texture_proto_mssg_MIN_FILTER_names + 10, 24}, 5 },
  { {texture_proto_mssg_MIN_FILTER_names + 34, 25}, 3 },
  { {texture_proto_mssg_MIN_FILTER_names + 59, 11}, 0 },
  { {texture_proto_mssg_MIN_FILTER_names + 70, 25}, 4 },
  { {texture_proto_mssg_MIN_FILTER_names + 95, 26}, 2 },
};

static const int texture_proto_mssg_MIN_FILTER_entries_by_number[] = {
  3, // 0 -> MIN_NEAREST
  0, // 1 -> MIN_LINEAR
  5, // 2 -> MIN_NEAREST_MIPMAP_NEAREST
  2, // 3 -> MIN_LINEAR_MIPMAP_NEAREST
  4, // 4 -> MIN_NEAREST_MIPMAP_LINEAR
  1, // 5 -> MIN_LINEAR_MIPMAP_LINEAR
};

const std::string& texture_proto_mssg_MIN_FILTER_Name(
    texture_proto_mssg_MIN_FILTER value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_MIN_FILTER_entries,
          texture_proto_mssg_MIN_FILTER_entries_by_number,
          6, texture_proto_mssg_MIN_FILTER_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_MIN_FILTER_entries,
      texture_proto_mssg_MIN_FILTER_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_MIN_FILTER_strings[idx].get();
}
bool texture_proto_mssg_MIN_FILTER_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_MIN_FILTER* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_MIN_FILTER_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_MIN_FILTER>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_NEAREST;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_LINEAR;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_NEAREST_MIPMAP_NEAREST;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_LINEAR_MIPMAP_NEAREST;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_NEAREST_MIPMAP_LINEAR;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_LINEAR_MIPMAP_LINEAR;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_FILTER_MIN;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg::MIN_FILTER_MAX;
constexpr int texture_proto_mssg::MIN_FILTER_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool texture_proto_mssg_WRAP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_WRAP_strings[3] = {};

static const char texture_proto_mssg_WRAP_names[] =
  "CLAMP_TO_EDGE"
  "MIRRORED_REPEAT"
  "REPEAT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_WRAP_entries[] = {
  { {texture_proto_mssg_WRAP_names + 0, 13}, 0 },
  { {texture_proto_mssg_WRAP_names + 13, 15}, 1 },
  { {texture_proto_mssg_WRAP_names + 28, 6}, 2 },
};

static const int texture_proto_mssg_WRAP_entries_by_number[] = {
  0, // 0 -> CLAMP_TO_EDGE
  1, // 1 -> MIRRORED_REPEAT
  2, // 2 -> REPEAT
};

const std::string& texture_proto_mssg_WRAP_Name(
    texture_proto_mssg_WRAP value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_WRAP_entries,
          texture_proto_mssg_WRAP_entries_by_number,
          3, texture_proto_mssg_WRAP_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_WRAP_entries,
      texture_proto_mssg_WRAP_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_WRAP_strings[idx].get();
}
bool texture_proto_mssg_WRAP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_WRAP* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_WRAP_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_WRAP>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_WRAP texture_proto_mssg::CLAMP_TO_EDGE;
constexpr texture_proto_mssg_WRAP texture_proto_mssg::MIRRORED_REPEAT;
constexpr texture_proto_mssg_WRAP texture_proto_mssg::REPEAT;
constexpr texture_proto_mssg_WRAP texture_proto_mssg::WRAP_MIN;
constexpr texture_proto_mssg_WRAP texture_proto_mssg::WRAP_MAX;
constexpr int texture_proto_mssg::WRAP_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool texture_proto_mssg_COMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_COMPONENT_strings[8] = {};

static const char texture_proto_mssg_COMPONENT_names[] =
  "BYTE"
  "DOUBLE"
  "FLOAT"
  "INT"
  "SHORT"
  "UNSIGNED_BYTE"
  "UNSIGNED_INT"
  "UNSIGNED_SHORT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_COMPONENT_entries[] = {
  { {texture_proto_mssg_COMPONENT_names + 0, 4}, 0 },
  { {texture_proto_mssg_COMPONENT_names + 4, 6}, 7 },
  { {texture_proto_mssg_COMPONENT_names + 10, 5}, 6 },
  { {texture_proto_mssg_COMPONENT_names + 15, 3}, 4 },
  { {texture_proto_mssg_COMPONENT_names + 18, 5}, 2 },
  { {texture_proto_mssg_COMPONENT_names + 23, 13}, 1 },
  { {texture_proto_mssg_COMPONENT_names + 36, 12}, 5 },
  { {texture_proto_mssg_COMPONENT_names + 48, 14}, 3 },
};

static const int texture_proto_mssg_COMPONENT_entries_by_number[] = {
  0, // 0 -> BYTE
  5, // 1 -> UNSIGNED_BYTE
  4, // 2 -> SHORT
  7, // 3 -> UNSIGNED_SHORT
  3, // 4 -> INT
  6, // 5 -> UNSIGNED_INT
  2, // 6 -> FLOAT
  1, // 7 -> DOUBLE
};

const std::string& texture_proto_mssg_COMPONENT_Name(
    texture_proto_mssg_COMPONENT value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_COMPONENT_entries,
          texture_proto_mssg_COMPONENT_entries_by_number,
          8, texture_proto_mssg_COMPONENT_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_COMPONENT_entries,
      texture_proto_mssg_COMPONENT_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_COMPONENT_strings[idx].get();
}
bool texture_proto_mssg_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_COMPONENT* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_COMPONENT_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_COMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::BYTE;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::UNSIGNED_BYTE;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::SHORT;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::UNSIGNED_SHORT;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::INT;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::UNSIGNED_INT;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::FLOAT;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::DOUBLE;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::COMPONENT_MIN;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg::COMPONENT_MAX;
constexpr int texture_proto_mssg::COMPONENT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool texture_proto_mssg_EFORMAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_EFORMAT_strings[3] = {};

static const char texture_proto_mssg_EFORMAT_names[] =
  "EFORMAT_BGR"
  "EFORMAT_RGB"
  "EFORMAT_RGBA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_EFORMAT_entries[] = {
  { {texture_proto_mssg_EFORMAT_names + 0, 11}, 0 },
  { {texture_proto_mssg_EFORMAT_names + 11, 11}, 1 },
  { {texture_proto_mssg_EFORMAT_names + 22, 12}, 2 },
};

static const int texture_proto_mssg_EFORMAT_entries_by_number[] = {
  0, // 0 -> EFORMAT_BGR
  1, // 1 -> EFORMAT_RGB
  2, // 2 -> EFORMAT_RGBA
};

const std::string& texture_proto_mssg_EFORMAT_Name(
    texture_proto_mssg_EFORMAT value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_EFORMAT_entries,
          texture_proto_mssg_EFORMAT_entries_by_number,
          3, texture_proto_mssg_EFORMAT_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_EFORMAT_entries,
      texture_proto_mssg_EFORMAT_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_EFORMAT_strings[idx].get();
}
bool texture_proto_mssg_EFORMAT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_EFORMAT* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_EFORMAT_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_EFORMAT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg::EFORMAT_BGR;
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg::EFORMAT_RGB;
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg::EFORMAT_RGBA;
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg::EFORMAT_MIN;
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg::EFORMAT_MAX;
constexpr int texture_proto_mssg::EFORMAT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool texture_proto_mssg_NCOMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> texture_proto_mssg_NCOMPONENT_strings[3] = {};

static const char texture_proto_mssg_NCOMPONENT_names[] =
  "NCOMPONENT_BGR"
  "NCOMPONENT_RGB"
  "NCOMPONENT_RGBA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry texture_proto_mssg_NCOMPONENT_entries[] = {
  { {texture_proto_mssg_NCOMPONENT_names + 0, 14}, 0 },
  { {texture_proto_mssg_NCOMPONENT_names + 14, 14}, 1 },
  { {texture_proto_mssg_NCOMPONENT_names + 28, 15}, 2 },
};

static const int texture_proto_mssg_NCOMPONENT_entries_by_number[] = {
  0, // 0 -> NCOMPONENT_BGR
  1, // 1 -> NCOMPONENT_RGB
  2, // 2 -> NCOMPONENT_RGBA
};

const std::string& texture_proto_mssg_NCOMPONENT_Name(
    texture_proto_mssg_NCOMPONENT value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          texture_proto_mssg_NCOMPONENT_entries,
          texture_proto_mssg_NCOMPONENT_entries_by_number,
          3, texture_proto_mssg_NCOMPONENT_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      texture_proto_mssg_NCOMPONENT_entries,
      texture_proto_mssg_NCOMPONENT_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     texture_proto_mssg_NCOMPONENT_strings[idx].get();
}
bool texture_proto_mssg_NCOMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_NCOMPONENT* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      texture_proto_mssg_NCOMPONENT_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<texture_proto_mssg_NCOMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg::NCOMPONENT_BGR;
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg::NCOMPONENT_RGB;
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg::NCOMPONENT_RGBA;
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg::NCOMPONENT_MIN;
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg::NCOMPONENT_MAX;
constexpr int texture_proto_mssg::NCOMPONENT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class texture_proto_mssg::_Internal {
 public:
};

texture_proto_mssg::texture_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:texture_proto_mssg)
}
texture_proto_mssg::texture_proto_mssg(const texture_proto_mssg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  texture_proto_mssg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.pdata_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.magfilter_){}
    , decltype(_impl_.minfilter_){}
    , decltype(_impl_.wraps_){}
    , decltype(_impl_.wrapt_){}
    , decltype(_impl_.pixeltype_){}
    , decltype(_impl_.eformat_){}
    , decltype(_impl_.ncomponent_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.as_is_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.component_){}
    , decltype(_impl_.bits_){}
    , decltype(_impl_.datasize_){}
    , decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pdata().empty()) {
    _this->_impl_.pdata_.Set(from._internal_pdata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hash_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.hash_));
  // @@protoc_insertion_point(copy_constructor:texture_proto_mssg)
}

inline void texture_proto_mssg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.pdata_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.magfilter_){0}
    , decltype(_impl_.minfilter_){0}
    , decltype(_impl_.wraps_){0}
    , decltype(_impl_.wrapt_){0}
    , decltype(_impl_.pixeltype_){0}
    , decltype(_impl_.eformat_){0}
    , decltype(_impl_.ncomponent_){0}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.as_is_){false}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.component_){0u}
    , decltype(_impl_.bits_){0u}
    , decltype(_impl_.datasize_){0u}
    , decltype(_impl_.hash_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

texture_proto_mssg::~texture_proto_mssg() {
  // @@protoc_insertion_point(destructor:texture_proto_mssg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void texture_proto_mssg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.pdata_.Destroy();
}

void texture_proto_mssg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void texture_proto_mssg::Clear() {
// @@protoc_insertion_point(message_clear_start:texture_proto_mssg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.pdata_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hash_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.hash_));
  _internal_metadata_.Clear<std::string>();
}

const char* texture_proto_mssg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .texture_proto_mssg.TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::texture_proto_mssg_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.MAG_FILTER magFilter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_magfilter(static_cast<::texture_proto_mssg_MAG_FILTER>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.MIN_FILTER minFilter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_minfilter(static_cast<::texture_proto_mssg_MIN_FILTER>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.WRAP wrapS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wraps(static_cast<::texture_proto_mssg_WRAP>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.WRAP wrapT = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wrapt(static_cast<::texture_proto_mssg_WRAP>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.COMPONENT pixelType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pixeltype(static_cast<::texture_proto_mssg_COMPONENT>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.EFORMAT eformat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eformat(static_cast<::texture_proto_mssg_EFORMAT>(val));
        } else
          goto handle_unusual;
        continue;
      // .texture_proto_mssg.NCOMPONENT ncomponent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ncomponent(static_cast<::texture_proto_mssg_NCOMPONENT>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool as_is = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.as_is_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 component = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.component_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bits = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataSize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes filename = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pData = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_pdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* texture_proto_mssg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:texture_proto_mssg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .texture_proto_mssg.TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .texture_proto_mssg.MAG_FILTER magFilter = 2;
  if (this->_internal_magfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_magfilter(), target);
  }

  // .texture_proto_mssg.MIN_FILTER minFilter = 3;
  if (this->_internal_minfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_minfilter(), target);
  }

  // .texture_proto_mssg.WRAP wrapS = 4;
  if (this->_internal_wraps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_wraps(), target);
  }

  // .texture_proto_mssg.WRAP wrapT = 5;
  if (this->_internal_wrapt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_wrapt(), target);
  }

  // .texture_proto_mssg.COMPONENT pixelType = 6;
  if (this->_internal_pixeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_pixeltype(), target);
  }

  // .texture_proto_mssg.EFORMAT eformat = 7;
  if (this->_internal_eformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_eformat(), target);
  }

  // .texture_proto_mssg.NCOMPONENT ncomponent = 8;
  if (this->_internal_ncomponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ncomponent(), target);
  }

  // bool enabled = 9;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // bool as_is = 10;
  if (this->_internal_as_is() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_as_is(), target);
  }

  // uint32 width = 11;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_width(), target);
  }

  // uint32 height = 12;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_height(), target);
  }

  // uint32 component = 13;
  if (this->_internal_component() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_component(), target);
  }

  // uint32 bits = 14;
  if (this->_internal_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_bits(), target);
  }

  // uint32 dataSize = 15;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_datasize(), target);
  }

  // uint32 hash = 16;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_hash(), target);
  }

  // bytes filename = 17;
  if (!this->_internal_filename().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_filename(), target);
  }

  // bytes pData = 18;
  if (!this->_internal_pdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_pdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:texture_proto_mssg)
  return target;
}

size_t texture_proto_mssg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:texture_proto_mssg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filename = 17;
  if (!this->_internal_filename().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filename());
  }

  // bytes pData = 18;
  if (!this->_internal_pdata().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pdata());
  }

  // .texture_proto_mssg.TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .texture_proto_mssg.MAG_FILTER magFilter = 2;
  if (this->_internal_magfilter() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_magfilter());
  }

  // .texture_proto_mssg.MIN_FILTER minFilter = 3;
  if (this->_internal_minfilter() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_minfilter());
  }

  // .texture_proto_mssg.WRAP wrapS = 4;
  if (this->_internal_wraps() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wraps());
  }

  // .texture_proto_mssg.WRAP wrapT = 5;
  if (this->_internal_wrapt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wrapt());
  }

  // .texture_proto_mssg.COMPONENT pixelType = 6;
  if (this->_internal_pixeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pixeltype());
  }

  // .texture_proto_mssg.EFORMAT eformat = 7;
  if (this->_internal_eformat() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_eformat());
  }

  // .texture_proto_mssg.NCOMPONENT ncomponent = 8;
  if (this->_internal_ncomponent() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ncomponent());
  }

  // bool enabled = 9;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool as_is = 10;
  if (this->_internal_as_is() != 0) {
    total_size += 1 + 1;
  }

  // uint32 width = 11;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 12;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 component = 13;
  if (this->_internal_component() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_component());
  }

  // uint32 bits = 14;
  if (this->_internal_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bits());
  }

  // uint32 dataSize = 15;
  if (this->_internal_datasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datasize());
  }

  // uint32 hash = 16;
  if (this->_internal_hash() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void texture_proto_mssg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const texture_proto_mssg*>(
      &from));
}

void texture_proto_mssg::MergeFrom(const texture_proto_mssg& from) {
  texture_proto_mssg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:texture_proto_mssg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_pdata().empty()) {
    _this->_internal_set_pdata(from._internal_pdata());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_magfilter() != 0) {
    _this->_internal_set_magfilter(from._internal_magfilter());
  }
  if (from._internal_minfilter() != 0) {
    _this->_internal_set_minfilter(from._internal_minfilter());
  }
  if (from._internal_wraps() != 0) {
    _this->_internal_set_wraps(from._internal_wraps());
  }
  if (from._internal_wrapt() != 0) {
    _this->_internal_set_wrapt(from._internal_wrapt());
  }
  if (from._internal_pixeltype() != 0) {
    _this->_internal_set_pixeltype(from._internal_pixeltype());
  }
  if (from._internal_eformat() != 0) {
    _this->_internal_set_eformat(from._internal_eformat());
  }
  if (from._internal_ncomponent() != 0) {
    _this->_internal_set_ncomponent(from._internal_ncomponent());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_as_is() != 0) {
    _this->_internal_set_as_is(from._internal_as_is());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_component() != 0) {
    _this->_internal_set_component(from._internal_component());
  }
  if (from._internal_bits() != 0) {
    _this->_internal_set_bits(from._internal_bits());
  }
  if (from._internal_datasize() != 0) {
    _this->_internal_set_datasize(from._internal_datasize());
  }
  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void texture_proto_mssg::CopyFrom(const texture_proto_mssg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:texture_proto_mssg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texture_proto_mssg::IsInitialized() const {
  return true;
}

void texture_proto_mssg::InternalSwap(texture_proto_mssg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pdata_, lhs_arena,
      &other->_impl_.pdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(texture_proto_mssg, _impl_.hash_)
      + sizeof(texture_proto_mssg::_impl_.hash_)
      - PROTOBUF_FIELD_OFFSET(texture_proto_mssg, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string texture_proto_mssg::GetTypeName() const {
  return "texture_proto_mssg";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::texture_proto_mssg*
Arena::CreateMaybeMessage< ::texture_proto_mssg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::texture_proto_mssg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
