// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skeleton_proto.proto

#include "skeleton_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR skeleton_proto_mssg::skeleton_proto_mssg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeindex_)*/0
  , /*decltype(_impl_.parentindex_)*/0
  , /*decltype(_impl_.previndex_)*/0
  , /*decltype(_impl_.nextindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct skeleton_proto_mssgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR skeleton_proto_mssgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~skeleton_proto_mssgDefaultTypeInternal() {}
  union {
    skeleton_proto_mssg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 skeleton_proto_mssgDefaultTypeInternal _skeleton_proto_mssg_default_instance_;

// ===================================================================

class skeleton_proto_mssg::_Internal {
 public:
};

skeleton_proto_mssg::skeleton_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:skeleton_proto_mssg)
}
skeleton_proto_mssg::skeleton_proto_mssg(const skeleton_proto_mssg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  skeleton_proto_mssg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , decltype(_impl_.parentname_){}
    , decltype(_impl_.nodeindex_){}
    , decltype(_impl_.parentindex_){}
    , decltype(_impl_.previndex_){}
    , decltype(_impl_.nextindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    _this->_impl_.nodename_.Set(from._internal_nodename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parentname().empty()) {
    _this->_impl_.parentname_.Set(from._internal_parentname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nodeindex_, &from._impl_.nodeindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nextindex_) -
    reinterpret_cast<char*>(&_impl_.nodeindex_)) + sizeof(_impl_.nextindex_));
  // @@protoc_insertion_point(copy_constructor:skeleton_proto_mssg)
}

inline void skeleton_proto_mssg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , decltype(_impl_.parentname_){}
    , decltype(_impl_.nodeindex_){0}
    , decltype(_impl_.parentindex_){0}
    , decltype(_impl_.previndex_){0}
    , decltype(_impl_.nextindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

skeleton_proto_mssg::~skeleton_proto_mssg() {
  // @@protoc_insertion_point(destructor:skeleton_proto_mssg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void skeleton_proto_mssg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.parentname_.Destroy();
}

void skeleton_proto_mssg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void skeleton_proto_mssg::Clear() {
// @@protoc_insertion_point(message_clear_start:skeleton_proto_mssg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.parentname_.ClearToEmpty();
  ::memset(&_impl_.nodeindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nextindex_) -
      reinterpret_cast<char*>(&_impl_.nodeindex_)) + sizeof(_impl_.nextindex_));
  _internal_metadata_.Clear<std::string>();
}

const char* skeleton_proto_mssg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 nodeIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 parentIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 prevIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.previndex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 nextIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.nextindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nodeName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_nodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes parentName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_parentname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* skeleton_proto_mssg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skeleton_proto_mssg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 nodeIndex = 1;
  if (this->_internal_nodeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_nodeindex(), target);
  }

  // sint32 parentIndex = 2;
  if (this->_internal_parentindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_parentindex(), target);
  }

  // sint32 prevIndex = 3;
  if (this->_internal_previndex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_previndex(), target);
  }

  // sint32 nextIndex = 4;
  if (this->_internal_nextindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_nextindex(), target);
  }

  // bytes nodeName = 5;
  if (!this->_internal_nodename().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_nodename(), target);
  }

  // bytes parentName = 6;
  if (!this->_internal_parentname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_parentname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skeleton_proto_mssg)
  return target;
}

size_t skeleton_proto_mssg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skeleton_proto_mssg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nodeName = 5;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nodename());
  }

  // bytes parentName = 6;
  if (!this->_internal_parentname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parentname());
  }

  // sint32 nodeIndex = 1;
  if (this->_internal_nodeindex() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_nodeindex());
  }

  // sint32 parentIndex = 2;
  if (this->_internal_parentindex() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_parentindex());
  }

  // sint32 prevIndex = 3;
  if (this->_internal_previndex() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_previndex());
  }

  // sint32 nextIndex = 4;
  if (this->_internal_nextindex() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_nextindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void skeleton_proto_mssg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const skeleton_proto_mssg*>(
      &from));
}

void skeleton_proto_mssg::MergeFrom(const skeleton_proto_mssg& from) {
  skeleton_proto_mssg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:skeleton_proto_mssg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_parentname().empty()) {
    _this->_internal_set_parentname(from._internal_parentname());
  }
  if (from._internal_nodeindex() != 0) {
    _this->_internal_set_nodeindex(from._internal_nodeindex());
  }
  if (from._internal_parentindex() != 0) {
    _this->_internal_set_parentindex(from._internal_parentindex());
  }
  if (from._internal_previndex() != 0) {
    _this->_internal_set_previndex(from._internal_previndex());
  }
  if (from._internal_nextindex() != 0) {
    _this->_internal_set_nextindex(from._internal_nextindex());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void skeleton_proto_mssg::CopyFrom(const skeleton_proto_mssg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skeleton_proto_mssg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_proto_mssg::IsInitialized() const {
  return true;
}

void skeleton_proto_mssg::InternalSwap(skeleton_proto_mssg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodename_, lhs_arena,
      &other->_impl_.nodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentname_, lhs_arena,
      &other->_impl_.parentname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(skeleton_proto_mssg, _impl_.nextindex_)
      + sizeof(skeleton_proto_mssg::_impl_.nextindex_)
      - PROTOBUF_FIELD_OFFSET(skeleton_proto_mssg, _impl_.nodeindex_)>(
          reinterpret_cast<char*>(&_impl_.nodeindex_),
          reinterpret_cast<char*>(&other->_impl_.nodeindex_));
}

std::string skeleton_proto_mssg::GetTypeName() const {
  return "skeleton_proto_mssg";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skeleton_proto_mssg*
Arena::CreateMaybeMessage< ::skeleton_proto_mssg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skeleton_proto_mssg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
