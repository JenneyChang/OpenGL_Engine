// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texture_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_texture_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_texture_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_texture_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_texture_5fproto_2eproto {
  static const uint32_t offsets[];
};
class texture_proto_mssg;
struct texture_proto_mssgDefaultTypeInternal;
extern texture_proto_mssgDefaultTypeInternal _texture_proto_mssg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::texture_proto_mssg* Arena::CreateMaybeMessage<::texture_proto_mssg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum texture_proto_mssg_TYPE : int {
  texture_proto_mssg_TYPE_JPEG = 0,
  texture_proto_mssg_TYPE_PNG = 1,
  texture_proto_mssg_TYPE_BMP = 2,
  texture_proto_mssg_TYPE_GIF = 3,
  texture_proto_mssg_TYPE_TGA = 4,
  texture_proto_mssg_TYPE_texture_proto_mssg_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_TYPE_texture_proto_mssg_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_TYPE_IsValid(int value);
constexpr texture_proto_mssg_TYPE texture_proto_mssg_TYPE_TYPE_MIN = texture_proto_mssg_TYPE_JPEG;
constexpr texture_proto_mssg_TYPE texture_proto_mssg_TYPE_TYPE_MAX = texture_proto_mssg_TYPE_TGA;
constexpr int texture_proto_mssg_TYPE_TYPE_ARRAYSIZE = texture_proto_mssg_TYPE_TYPE_MAX + 1;

const std::string& texture_proto_mssg_TYPE_Name(texture_proto_mssg_TYPE value);
template<typename T>
inline const std::string& texture_proto_mssg_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_TYPE_Name.");
  return texture_proto_mssg_TYPE_Name(static_cast<texture_proto_mssg_TYPE>(enum_t_value));
}
bool texture_proto_mssg_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_TYPE* value);
enum texture_proto_mssg_MAG_FILTER : int {
  texture_proto_mssg_MAG_FILTER_MAG_NEAREST = 0,
  texture_proto_mssg_MAG_FILTER_MAG_LINEAR = 1,
  texture_proto_mssg_MAG_FILTER_texture_proto_mssg_MAG_FILTER_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_MAG_FILTER_texture_proto_mssg_MAG_FILTER_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_MAG_FILTER_IsValid(int value);
constexpr texture_proto_mssg_MAG_FILTER texture_proto_mssg_MAG_FILTER_MAG_FILTER_MIN = texture_proto_mssg_MAG_FILTER_MAG_NEAREST;
constexpr texture_proto_mssg_MAG_FILTER texture_proto_mssg_MAG_FILTER_MAG_FILTER_MAX = texture_proto_mssg_MAG_FILTER_MAG_LINEAR;
constexpr int texture_proto_mssg_MAG_FILTER_MAG_FILTER_ARRAYSIZE = texture_proto_mssg_MAG_FILTER_MAG_FILTER_MAX + 1;

const std::string& texture_proto_mssg_MAG_FILTER_Name(texture_proto_mssg_MAG_FILTER value);
template<typename T>
inline const std::string& texture_proto_mssg_MAG_FILTER_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_MAG_FILTER>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_MAG_FILTER_Name.");
  return texture_proto_mssg_MAG_FILTER_Name(static_cast<texture_proto_mssg_MAG_FILTER>(enum_t_value));
}
bool texture_proto_mssg_MAG_FILTER_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_MAG_FILTER* value);
enum texture_proto_mssg_MIN_FILTER : int {
  texture_proto_mssg_MIN_FILTER_MIN_NEAREST = 0,
  texture_proto_mssg_MIN_FILTER_MIN_LINEAR = 1,
  texture_proto_mssg_MIN_FILTER_MIN_NEAREST_MIPMAP_NEAREST = 2,
  texture_proto_mssg_MIN_FILTER_MIN_LINEAR_MIPMAP_NEAREST = 3,
  texture_proto_mssg_MIN_FILTER_MIN_NEAREST_MIPMAP_LINEAR = 4,
  texture_proto_mssg_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR = 5,
  texture_proto_mssg_MIN_FILTER_texture_proto_mssg_MIN_FILTER_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_MIN_FILTER_texture_proto_mssg_MIN_FILTER_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_MIN_FILTER_IsValid(int value);
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg_MIN_FILTER_MIN_FILTER_MIN = texture_proto_mssg_MIN_FILTER_MIN_NEAREST;
constexpr texture_proto_mssg_MIN_FILTER texture_proto_mssg_MIN_FILTER_MIN_FILTER_MAX = texture_proto_mssg_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR;
constexpr int texture_proto_mssg_MIN_FILTER_MIN_FILTER_ARRAYSIZE = texture_proto_mssg_MIN_FILTER_MIN_FILTER_MAX + 1;

const std::string& texture_proto_mssg_MIN_FILTER_Name(texture_proto_mssg_MIN_FILTER value);
template<typename T>
inline const std::string& texture_proto_mssg_MIN_FILTER_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_MIN_FILTER>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_MIN_FILTER_Name.");
  return texture_proto_mssg_MIN_FILTER_Name(static_cast<texture_proto_mssg_MIN_FILTER>(enum_t_value));
}
bool texture_proto_mssg_MIN_FILTER_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_MIN_FILTER* value);
enum texture_proto_mssg_WRAP : int {
  texture_proto_mssg_WRAP_CLAMP_TO_EDGE = 0,
  texture_proto_mssg_WRAP_MIRRORED_REPEAT = 1,
  texture_proto_mssg_WRAP_REPEAT = 2,
  texture_proto_mssg_WRAP_texture_proto_mssg_WRAP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_WRAP_texture_proto_mssg_WRAP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_WRAP_IsValid(int value);
constexpr texture_proto_mssg_WRAP texture_proto_mssg_WRAP_WRAP_MIN = texture_proto_mssg_WRAP_CLAMP_TO_EDGE;
constexpr texture_proto_mssg_WRAP texture_proto_mssg_WRAP_WRAP_MAX = texture_proto_mssg_WRAP_REPEAT;
constexpr int texture_proto_mssg_WRAP_WRAP_ARRAYSIZE = texture_proto_mssg_WRAP_WRAP_MAX + 1;

const std::string& texture_proto_mssg_WRAP_Name(texture_proto_mssg_WRAP value);
template<typename T>
inline const std::string& texture_proto_mssg_WRAP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_WRAP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_WRAP_Name.");
  return texture_proto_mssg_WRAP_Name(static_cast<texture_proto_mssg_WRAP>(enum_t_value));
}
bool texture_proto_mssg_WRAP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_WRAP* value);
enum texture_proto_mssg_COMPONENT : int {
  texture_proto_mssg_COMPONENT_BYTE = 0,
  texture_proto_mssg_COMPONENT_UNSIGNED_BYTE = 1,
  texture_proto_mssg_COMPONENT_SHORT = 2,
  texture_proto_mssg_COMPONENT_UNSIGNED_SHORT = 3,
  texture_proto_mssg_COMPONENT_INT = 4,
  texture_proto_mssg_COMPONENT_UNSIGNED_INT = 5,
  texture_proto_mssg_COMPONENT_FLOAT = 6,
  texture_proto_mssg_COMPONENT_DOUBLE = 7,
  texture_proto_mssg_COMPONENT_texture_proto_mssg_COMPONENT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_COMPONENT_texture_proto_mssg_COMPONENT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_COMPONENT_IsValid(int value);
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg_COMPONENT_COMPONENT_MIN = texture_proto_mssg_COMPONENT_BYTE;
constexpr texture_proto_mssg_COMPONENT texture_proto_mssg_COMPONENT_COMPONENT_MAX = texture_proto_mssg_COMPONENT_DOUBLE;
constexpr int texture_proto_mssg_COMPONENT_COMPONENT_ARRAYSIZE = texture_proto_mssg_COMPONENT_COMPONENT_MAX + 1;

const std::string& texture_proto_mssg_COMPONENT_Name(texture_proto_mssg_COMPONENT value);
template<typename T>
inline const std::string& texture_proto_mssg_COMPONENT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_COMPONENT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_COMPONENT_Name.");
  return texture_proto_mssg_COMPONENT_Name(static_cast<texture_proto_mssg_COMPONENT>(enum_t_value));
}
bool texture_proto_mssg_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_COMPONENT* value);
enum texture_proto_mssg_EFORMAT : int {
  texture_proto_mssg_EFORMAT_EFORMAT_BGR = 0,
  texture_proto_mssg_EFORMAT_EFORMAT_RGB = 1,
  texture_proto_mssg_EFORMAT_EFORMAT_RGBA = 2,
  texture_proto_mssg_EFORMAT_texture_proto_mssg_EFORMAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_EFORMAT_texture_proto_mssg_EFORMAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_EFORMAT_IsValid(int value);
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg_EFORMAT_EFORMAT_MIN = texture_proto_mssg_EFORMAT_EFORMAT_BGR;
constexpr texture_proto_mssg_EFORMAT texture_proto_mssg_EFORMAT_EFORMAT_MAX = texture_proto_mssg_EFORMAT_EFORMAT_RGBA;
constexpr int texture_proto_mssg_EFORMAT_EFORMAT_ARRAYSIZE = texture_proto_mssg_EFORMAT_EFORMAT_MAX + 1;

const std::string& texture_proto_mssg_EFORMAT_Name(texture_proto_mssg_EFORMAT value);
template<typename T>
inline const std::string& texture_proto_mssg_EFORMAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_EFORMAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_EFORMAT_Name.");
  return texture_proto_mssg_EFORMAT_Name(static_cast<texture_proto_mssg_EFORMAT>(enum_t_value));
}
bool texture_proto_mssg_EFORMAT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_EFORMAT* value);
enum texture_proto_mssg_NCOMPONENT : int {
  texture_proto_mssg_NCOMPONENT_NCOMPONENT_BGR = 0,
  texture_proto_mssg_NCOMPONENT_NCOMPONENT_RGB = 1,
  texture_proto_mssg_NCOMPONENT_NCOMPONENT_RGBA = 2,
  texture_proto_mssg_NCOMPONENT_texture_proto_mssg_NCOMPONENT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  texture_proto_mssg_NCOMPONENT_texture_proto_mssg_NCOMPONENT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool texture_proto_mssg_NCOMPONENT_IsValid(int value);
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg_NCOMPONENT_NCOMPONENT_MIN = texture_proto_mssg_NCOMPONENT_NCOMPONENT_BGR;
constexpr texture_proto_mssg_NCOMPONENT texture_proto_mssg_NCOMPONENT_NCOMPONENT_MAX = texture_proto_mssg_NCOMPONENT_NCOMPONENT_RGBA;
constexpr int texture_proto_mssg_NCOMPONENT_NCOMPONENT_ARRAYSIZE = texture_proto_mssg_NCOMPONENT_NCOMPONENT_MAX + 1;

const std::string& texture_proto_mssg_NCOMPONENT_Name(texture_proto_mssg_NCOMPONENT value);
template<typename T>
inline const std::string& texture_proto_mssg_NCOMPONENT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, texture_proto_mssg_NCOMPONENT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function texture_proto_mssg_NCOMPONENT_Name.");
  return texture_proto_mssg_NCOMPONENT_Name(static_cast<texture_proto_mssg_NCOMPONENT>(enum_t_value));
}
bool texture_proto_mssg_NCOMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, texture_proto_mssg_NCOMPONENT* value);
// ===================================================================

class texture_proto_mssg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:texture_proto_mssg) */ {
 public:
  inline texture_proto_mssg() : texture_proto_mssg(nullptr) {}
  ~texture_proto_mssg() override;
  explicit PROTOBUF_CONSTEXPR texture_proto_mssg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  texture_proto_mssg(const texture_proto_mssg& from);
  texture_proto_mssg(texture_proto_mssg&& from) noexcept
    : texture_proto_mssg() {
    *this = ::std::move(from);
  }

  inline texture_proto_mssg& operator=(const texture_proto_mssg& from) {
    CopyFrom(from);
    return *this;
  }
  inline texture_proto_mssg& operator=(texture_proto_mssg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const texture_proto_mssg& default_instance() {
    return *internal_default_instance();
  }
  static inline const texture_proto_mssg* internal_default_instance() {
    return reinterpret_cast<const texture_proto_mssg*>(
               &_texture_proto_mssg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(texture_proto_mssg& a, texture_proto_mssg& b) {
    a.Swap(&b);
  }
  inline void Swap(texture_proto_mssg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(texture_proto_mssg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  texture_proto_mssg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<texture_proto_mssg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const texture_proto_mssg& from);
  void MergeFrom(const texture_proto_mssg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(texture_proto_mssg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "texture_proto_mssg";
  }
  protected:
  explicit texture_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef texture_proto_mssg_TYPE TYPE;
  static constexpr TYPE JPEG =
    texture_proto_mssg_TYPE_JPEG;
  static constexpr TYPE PNG =
    texture_proto_mssg_TYPE_PNG;
  static constexpr TYPE BMP =
    texture_proto_mssg_TYPE_BMP;
  static constexpr TYPE GIF =
    texture_proto_mssg_TYPE_GIF;
  static constexpr TYPE TGA =
    texture_proto_mssg_TYPE_TGA;
  static inline bool TYPE_IsValid(int value) {
    return texture_proto_mssg_TYPE_IsValid(value);
  }
  static constexpr TYPE TYPE_MIN =
    texture_proto_mssg_TYPE_TYPE_MIN;
  static constexpr TYPE TYPE_MAX =
    texture_proto_mssg_TYPE_TYPE_MAX;
  static constexpr int TYPE_ARRAYSIZE =
    texture_proto_mssg_TYPE_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TYPE_Name.");
    return texture_proto_mssg_TYPE_Name(enum_t_value);
  }
  static inline bool TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TYPE* value) {
    return texture_proto_mssg_TYPE_Parse(name, value);
  }

  typedef texture_proto_mssg_MAG_FILTER MAG_FILTER;
  static constexpr MAG_FILTER MAG_NEAREST =
    texture_proto_mssg_MAG_FILTER_MAG_NEAREST;
  static constexpr MAG_FILTER MAG_LINEAR =
    texture_proto_mssg_MAG_FILTER_MAG_LINEAR;
  static inline bool MAG_FILTER_IsValid(int value) {
    return texture_proto_mssg_MAG_FILTER_IsValid(value);
  }
  static constexpr MAG_FILTER MAG_FILTER_MIN =
    texture_proto_mssg_MAG_FILTER_MAG_FILTER_MIN;
  static constexpr MAG_FILTER MAG_FILTER_MAX =
    texture_proto_mssg_MAG_FILTER_MAG_FILTER_MAX;
  static constexpr int MAG_FILTER_ARRAYSIZE =
    texture_proto_mssg_MAG_FILTER_MAG_FILTER_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MAG_FILTER_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MAG_FILTER>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MAG_FILTER_Name.");
    return texture_proto_mssg_MAG_FILTER_Name(enum_t_value);
  }
  static inline bool MAG_FILTER_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MAG_FILTER* value) {
    return texture_proto_mssg_MAG_FILTER_Parse(name, value);
  }

  typedef texture_proto_mssg_MIN_FILTER MIN_FILTER;
  static constexpr MIN_FILTER MIN_NEAREST =
    texture_proto_mssg_MIN_FILTER_MIN_NEAREST;
  static constexpr MIN_FILTER MIN_LINEAR =
    texture_proto_mssg_MIN_FILTER_MIN_LINEAR;
  static constexpr MIN_FILTER MIN_NEAREST_MIPMAP_NEAREST =
    texture_proto_mssg_MIN_FILTER_MIN_NEAREST_MIPMAP_NEAREST;
  static constexpr MIN_FILTER MIN_LINEAR_MIPMAP_NEAREST =
    texture_proto_mssg_MIN_FILTER_MIN_LINEAR_MIPMAP_NEAREST;
  static constexpr MIN_FILTER MIN_NEAREST_MIPMAP_LINEAR =
    texture_proto_mssg_MIN_FILTER_MIN_NEAREST_MIPMAP_LINEAR;
  static constexpr MIN_FILTER MIN_LINEAR_MIPMAP_LINEAR =
    texture_proto_mssg_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR;
  static inline bool MIN_FILTER_IsValid(int value) {
    return texture_proto_mssg_MIN_FILTER_IsValid(value);
  }
  static constexpr MIN_FILTER MIN_FILTER_MIN =
    texture_proto_mssg_MIN_FILTER_MIN_FILTER_MIN;
  static constexpr MIN_FILTER MIN_FILTER_MAX =
    texture_proto_mssg_MIN_FILTER_MIN_FILTER_MAX;
  static constexpr int MIN_FILTER_ARRAYSIZE =
    texture_proto_mssg_MIN_FILTER_MIN_FILTER_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MIN_FILTER_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MIN_FILTER>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MIN_FILTER_Name.");
    return texture_proto_mssg_MIN_FILTER_Name(enum_t_value);
  }
  static inline bool MIN_FILTER_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MIN_FILTER* value) {
    return texture_proto_mssg_MIN_FILTER_Parse(name, value);
  }

  typedef texture_proto_mssg_WRAP WRAP;
  static constexpr WRAP CLAMP_TO_EDGE =
    texture_proto_mssg_WRAP_CLAMP_TO_EDGE;
  static constexpr WRAP MIRRORED_REPEAT =
    texture_proto_mssg_WRAP_MIRRORED_REPEAT;
  static constexpr WRAP REPEAT =
    texture_proto_mssg_WRAP_REPEAT;
  static inline bool WRAP_IsValid(int value) {
    return texture_proto_mssg_WRAP_IsValid(value);
  }
  static constexpr WRAP WRAP_MIN =
    texture_proto_mssg_WRAP_WRAP_MIN;
  static constexpr WRAP WRAP_MAX =
    texture_proto_mssg_WRAP_WRAP_MAX;
  static constexpr int WRAP_ARRAYSIZE =
    texture_proto_mssg_WRAP_WRAP_ARRAYSIZE;
  template<typename T>
  static inline const std::string& WRAP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WRAP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WRAP_Name.");
    return texture_proto_mssg_WRAP_Name(enum_t_value);
  }
  static inline bool WRAP_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WRAP* value) {
    return texture_proto_mssg_WRAP_Parse(name, value);
  }

  typedef texture_proto_mssg_COMPONENT COMPONENT;
  static constexpr COMPONENT BYTE =
    texture_proto_mssg_COMPONENT_BYTE;
  static constexpr COMPONENT UNSIGNED_BYTE =
    texture_proto_mssg_COMPONENT_UNSIGNED_BYTE;
  static constexpr COMPONENT SHORT =
    texture_proto_mssg_COMPONENT_SHORT;
  static constexpr COMPONENT UNSIGNED_SHORT =
    texture_proto_mssg_COMPONENT_UNSIGNED_SHORT;
  static constexpr COMPONENT INT =
    texture_proto_mssg_COMPONENT_INT;
  static constexpr COMPONENT UNSIGNED_INT =
    texture_proto_mssg_COMPONENT_UNSIGNED_INT;
  static constexpr COMPONENT FLOAT =
    texture_proto_mssg_COMPONENT_FLOAT;
  static constexpr COMPONENT DOUBLE =
    texture_proto_mssg_COMPONENT_DOUBLE;
  static inline bool COMPONENT_IsValid(int value) {
    return texture_proto_mssg_COMPONENT_IsValid(value);
  }
  static constexpr COMPONENT COMPONENT_MIN =
    texture_proto_mssg_COMPONENT_COMPONENT_MIN;
  static constexpr COMPONENT COMPONENT_MAX =
    texture_proto_mssg_COMPONENT_COMPONENT_MAX;
  static constexpr int COMPONENT_ARRAYSIZE =
    texture_proto_mssg_COMPONENT_COMPONENT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& COMPONENT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, COMPONENT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function COMPONENT_Name.");
    return texture_proto_mssg_COMPONENT_Name(enum_t_value);
  }
  static inline bool COMPONENT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      COMPONENT* value) {
    return texture_proto_mssg_COMPONENT_Parse(name, value);
  }

  typedef texture_proto_mssg_EFORMAT EFORMAT;
  static constexpr EFORMAT EFORMAT_BGR =
    texture_proto_mssg_EFORMAT_EFORMAT_BGR;
  static constexpr EFORMAT EFORMAT_RGB =
    texture_proto_mssg_EFORMAT_EFORMAT_RGB;
  static constexpr EFORMAT EFORMAT_RGBA =
    texture_proto_mssg_EFORMAT_EFORMAT_RGBA;
  static inline bool EFORMAT_IsValid(int value) {
    return texture_proto_mssg_EFORMAT_IsValid(value);
  }
  static constexpr EFORMAT EFORMAT_MIN =
    texture_proto_mssg_EFORMAT_EFORMAT_MIN;
  static constexpr EFORMAT EFORMAT_MAX =
    texture_proto_mssg_EFORMAT_EFORMAT_MAX;
  static constexpr int EFORMAT_ARRAYSIZE =
    texture_proto_mssg_EFORMAT_EFORMAT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EFORMAT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EFORMAT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EFORMAT_Name.");
    return texture_proto_mssg_EFORMAT_Name(enum_t_value);
  }
  static inline bool EFORMAT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EFORMAT* value) {
    return texture_proto_mssg_EFORMAT_Parse(name, value);
  }

  typedef texture_proto_mssg_NCOMPONENT NCOMPONENT;
  static constexpr NCOMPONENT NCOMPONENT_BGR =
    texture_proto_mssg_NCOMPONENT_NCOMPONENT_BGR;
  static constexpr NCOMPONENT NCOMPONENT_RGB =
    texture_proto_mssg_NCOMPONENT_NCOMPONENT_RGB;
  static constexpr NCOMPONENT NCOMPONENT_RGBA =
    texture_proto_mssg_NCOMPONENT_NCOMPONENT_RGBA;
  static inline bool NCOMPONENT_IsValid(int value) {
    return texture_proto_mssg_NCOMPONENT_IsValid(value);
  }
  static constexpr NCOMPONENT NCOMPONENT_MIN =
    texture_proto_mssg_NCOMPONENT_NCOMPONENT_MIN;
  static constexpr NCOMPONENT NCOMPONENT_MAX =
    texture_proto_mssg_NCOMPONENT_NCOMPONENT_MAX;
  static constexpr int NCOMPONENT_ARRAYSIZE =
    texture_proto_mssg_NCOMPONENT_NCOMPONENT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NCOMPONENT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NCOMPONENT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NCOMPONENT_Name.");
    return texture_proto_mssg_NCOMPONENT_Name(enum_t_value);
  }
  static inline bool NCOMPONENT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NCOMPONENT* value) {
    return texture_proto_mssg_NCOMPONENT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 17,
    kPDataFieldNumber = 18,
    kTypeFieldNumber = 1,
    kMagFilterFieldNumber = 2,
    kMinFilterFieldNumber = 3,
    kWrapSFieldNumber = 4,
    kWrapTFieldNumber = 5,
    kPixelTypeFieldNumber = 6,
    kEformatFieldNumber = 7,
    kNcomponentFieldNumber = 8,
    kEnabledFieldNumber = 9,
    kAsIsFieldNumber = 10,
    kWidthFieldNumber = 11,
    kHeightFieldNumber = 12,
    kComponentFieldNumber = 13,
    kBitsFieldNumber = 14,
    kDataSizeFieldNumber = 15,
    kHashFieldNumber = 16,
  };
  // bytes filename = 17;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes pData = 18;
  void clear_pdata();
  const std::string& pdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pdata();
  PROTOBUF_NODISCARD std::string* release_pdata();
  void set_allocated_pdata(std::string* pdata);
  private:
  const std::string& _internal_pdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pdata(const std::string& value);
  std::string* _internal_mutable_pdata();
  public:

  // .texture_proto_mssg.TYPE type = 1;
  void clear_type();
  ::texture_proto_mssg_TYPE type() const;
  void set_type(::texture_proto_mssg_TYPE value);
  private:
  ::texture_proto_mssg_TYPE _internal_type() const;
  void _internal_set_type(::texture_proto_mssg_TYPE value);
  public:

  // .texture_proto_mssg.MAG_FILTER magFilter = 2;
  void clear_magfilter();
  ::texture_proto_mssg_MAG_FILTER magfilter() const;
  void set_magfilter(::texture_proto_mssg_MAG_FILTER value);
  private:
  ::texture_proto_mssg_MAG_FILTER _internal_magfilter() const;
  void _internal_set_magfilter(::texture_proto_mssg_MAG_FILTER value);
  public:

  // .texture_proto_mssg.MIN_FILTER minFilter = 3;
  void clear_minfilter();
  ::texture_proto_mssg_MIN_FILTER minfilter() const;
  void set_minfilter(::texture_proto_mssg_MIN_FILTER value);
  private:
  ::texture_proto_mssg_MIN_FILTER _internal_minfilter() const;
  void _internal_set_minfilter(::texture_proto_mssg_MIN_FILTER value);
  public:

  // .texture_proto_mssg.WRAP wrapS = 4;
  void clear_wraps();
  ::texture_proto_mssg_WRAP wraps() const;
  void set_wraps(::texture_proto_mssg_WRAP value);
  private:
  ::texture_proto_mssg_WRAP _internal_wraps() const;
  void _internal_set_wraps(::texture_proto_mssg_WRAP value);
  public:

  // .texture_proto_mssg.WRAP wrapT = 5;
  void clear_wrapt();
  ::texture_proto_mssg_WRAP wrapt() const;
  void set_wrapt(::texture_proto_mssg_WRAP value);
  private:
  ::texture_proto_mssg_WRAP _internal_wrapt() const;
  void _internal_set_wrapt(::texture_proto_mssg_WRAP value);
  public:

  // .texture_proto_mssg.COMPONENT pixelType = 6;
  void clear_pixeltype();
  ::texture_proto_mssg_COMPONENT pixeltype() const;
  void set_pixeltype(::texture_proto_mssg_COMPONENT value);
  private:
  ::texture_proto_mssg_COMPONENT _internal_pixeltype() const;
  void _internal_set_pixeltype(::texture_proto_mssg_COMPONENT value);
  public:

  // .texture_proto_mssg.EFORMAT eformat = 7;
  void clear_eformat();
  ::texture_proto_mssg_EFORMAT eformat() const;
  void set_eformat(::texture_proto_mssg_EFORMAT value);
  private:
  ::texture_proto_mssg_EFORMAT _internal_eformat() const;
  void _internal_set_eformat(::texture_proto_mssg_EFORMAT value);
  public:

  // .texture_proto_mssg.NCOMPONENT ncomponent = 8;
  void clear_ncomponent();
  ::texture_proto_mssg_NCOMPONENT ncomponent() const;
  void set_ncomponent(::texture_proto_mssg_NCOMPONENT value);
  private:
  ::texture_proto_mssg_NCOMPONENT _internal_ncomponent() const;
  void _internal_set_ncomponent(::texture_proto_mssg_NCOMPONENT value);
  public:

  // bool enabled = 9;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool as_is = 10;
  void clear_as_is();
  bool as_is() const;
  void set_as_is(bool value);
  private:
  bool _internal_as_is() const;
  void _internal_set_as_is(bool value);
  public:

  // uint32 width = 11;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 12;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 component = 13;
  void clear_component();
  uint32_t component() const;
  void set_component(uint32_t value);
  private:
  uint32_t _internal_component() const;
  void _internal_set_component(uint32_t value);
  public:

  // uint32 bits = 14;
  void clear_bits();
  uint32_t bits() const;
  void set_bits(uint32_t value);
  private:
  uint32_t _internal_bits() const;
  void _internal_set_bits(uint32_t value);
  public:

  // uint32 dataSize = 15;
  void clear_datasize();
  uint32_t datasize() const;
  void set_datasize(uint32_t value);
  private:
  uint32_t _internal_datasize() const;
  void _internal_set_datasize(uint32_t value);
  public:

  // uint32 hash = 16;
  void clear_hash();
  uint32_t hash() const;
  void set_hash(uint32_t value);
  private:
  uint32_t _internal_hash() const;
  void _internal_set_hash(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:texture_proto_mssg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pdata_;
    int type_;
    int magfilter_;
    int minfilter_;
    int wraps_;
    int wrapt_;
    int pixeltype_;
    int eformat_;
    int ncomponent_;
    bool enabled_;
    bool as_is_;
    uint32_t width_;
    uint32_t height_;
    uint32_t component_;
    uint32_t bits_;
    uint32_t datasize_;
    uint32_t hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_texture_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// texture_proto_mssg

// .texture_proto_mssg.TYPE type = 1;
inline void texture_proto_mssg::clear_type() {
  _impl_.type_ = 0;
}
inline ::texture_proto_mssg_TYPE texture_proto_mssg::_internal_type() const {
  return static_cast< ::texture_proto_mssg_TYPE >(_impl_.type_);
}
inline ::texture_proto_mssg_TYPE texture_proto_mssg::type() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.type)
  return _internal_type();
}
inline void texture_proto_mssg::_internal_set_type(::texture_proto_mssg_TYPE value) {
  
  _impl_.type_ = value;
}
inline void texture_proto_mssg::set_type(::texture_proto_mssg_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.type)
}

// .texture_proto_mssg.MAG_FILTER magFilter = 2;
inline void texture_proto_mssg::clear_magfilter() {
  _impl_.magfilter_ = 0;
}
inline ::texture_proto_mssg_MAG_FILTER texture_proto_mssg::_internal_magfilter() const {
  return static_cast< ::texture_proto_mssg_MAG_FILTER >(_impl_.magfilter_);
}
inline ::texture_proto_mssg_MAG_FILTER texture_proto_mssg::magfilter() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.magFilter)
  return _internal_magfilter();
}
inline void texture_proto_mssg::_internal_set_magfilter(::texture_proto_mssg_MAG_FILTER value) {
  
  _impl_.magfilter_ = value;
}
inline void texture_proto_mssg::set_magfilter(::texture_proto_mssg_MAG_FILTER value) {
  _internal_set_magfilter(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.magFilter)
}

// .texture_proto_mssg.MIN_FILTER minFilter = 3;
inline void texture_proto_mssg::clear_minfilter() {
  _impl_.minfilter_ = 0;
}
inline ::texture_proto_mssg_MIN_FILTER texture_proto_mssg::_internal_minfilter() const {
  return static_cast< ::texture_proto_mssg_MIN_FILTER >(_impl_.minfilter_);
}
inline ::texture_proto_mssg_MIN_FILTER texture_proto_mssg::minfilter() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.minFilter)
  return _internal_minfilter();
}
inline void texture_proto_mssg::_internal_set_minfilter(::texture_proto_mssg_MIN_FILTER value) {
  
  _impl_.minfilter_ = value;
}
inline void texture_proto_mssg::set_minfilter(::texture_proto_mssg_MIN_FILTER value) {
  _internal_set_minfilter(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.minFilter)
}

// .texture_proto_mssg.WRAP wrapS = 4;
inline void texture_proto_mssg::clear_wraps() {
  _impl_.wraps_ = 0;
}
inline ::texture_proto_mssg_WRAP texture_proto_mssg::_internal_wraps() const {
  return static_cast< ::texture_proto_mssg_WRAP >(_impl_.wraps_);
}
inline ::texture_proto_mssg_WRAP texture_proto_mssg::wraps() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.wrapS)
  return _internal_wraps();
}
inline void texture_proto_mssg::_internal_set_wraps(::texture_proto_mssg_WRAP value) {
  
  _impl_.wraps_ = value;
}
inline void texture_proto_mssg::set_wraps(::texture_proto_mssg_WRAP value) {
  _internal_set_wraps(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.wrapS)
}

// .texture_proto_mssg.WRAP wrapT = 5;
inline void texture_proto_mssg::clear_wrapt() {
  _impl_.wrapt_ = 0;
}
inline ::texture_proto_mssg_WRAP texture_proto_mssg::_internal_wrapt() const {
  return static_cast< ::texture_proto_mssg_WRAP >(_impl_.wrapt_);
}
inline ::texture_proto_mssg_WRAP texture_proto_mssg::wrapt() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.wrapT)
  return _internal_wrapt();
}
inline void texture_proto_mssg::_internal_set_wrapt(::texture_proto_mssg_WRAP value) {
  
  _impl_.wrapt_ = value;
}
inline void texture_proto_mssg::set_wrapt(::texture_proto_mssg_WRAP value) {
  _internal_set_wrapt(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.wrapT)
}

// .texture_proto_mssg.COMPONENT pixelType = 6;
inline void texture_proto_mssg::clear_pixeltype() {
  _impl_.pixeltype_ = 0;
}
inline ::texture_proto_mssg_COMPONENT texture_proto_mssg::_internal_pixeltype() const {
  return static_cast< ::texture_proto_mssg_COMPONENT >(_impl_.pixeltype_);
}
inline ::texture_proto_mssg_COMPONENT texture_proto_mssg::pixeltype() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.pixelType)
  return _internal_pixeltype();
}
inline void texture_proto_mssg::_internal_set_pixeltype(::texture_proto_mssg_COMPONENT value) {
  
  _impl_.pixeltype_ = value;
}
inline void texture_proto_mssg::set_pixeltype(::texture_proto_mssg_COMPONENT value) {
  _internal_set_pixeltype(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.pixelType)
}

// .texture_proto_mssg.EFORMAT eformat = 7;
inline void texture_proto_mssg::clear_eformat() {
  _impl_.eformat_ = 0;
}
inline ::texture_proto_mssg_EFORMAT texture_proto_mssg::_internal_eformat() const {
  return static_cast< ::texture_proto_mssg_EFORMAT >(_impl_.eformat_);
}
inline ::texture_proto_mssg_EFORMAT texture_proto_mssg::eformat() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.eformat)
  return _internal_eformat();
}
inline void texture_proto_mssg::_internal_set_eformat(::texture_proto_mssg_EFORMAT value) {
  
  _impl_.eformat_ = value;
}
inline void texture_proto_mssg::set_eformat(::texture_proto_mssg_EFORMAT value) {
  _internal_set_eformat(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.eformat)
}

// .texture_proto_mssg.NCOMPONENT ncomponent = 8;
inline void texture_proto_mssg::clear_ncomponent() {
  _impl_.ncomponent_ = 0;
}
inline ::texture_proto_mssg_NCOMPONENT texture_proto_mssg::_internal_ncomponent() const {
  return static_cast< ::texture_proto_mssg_NCOMPONENT >(_impl_.ncomponent_);
}
inline ::texture_proto_mssg_NCOMPONENT texture_proto_mssg::ncomponent() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.ncomponent)
  return _internal_ncomponent();
}
inline void texture_proto_mssg::_internal_set_ncomponent(::texture_proto_mssg_NCOMPONENT value) {
  
  _impl_.ncomponent_ = value;
}
inline void texture_proto_mssg::set_ncomponent(::texture_proto_mssg_NCOMPONENT value) {
  _internal_set_ncomponent(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.ncomponent)
}

// bool enabled = 9;
inline void texture_proto_mssg::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool texture_proto_mssg::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool texture_proto_mssg::enabled() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.enabled)
  return _internal_enabled();
}
inline void texture_proto_mssg::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void texture_proto_mssg::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.enabled)
}

// bool as_is = 10;
inline void texture_proto_mssg::clear_as_is() {
  _impl_.as_is_ = false;
}
inline bool texture_proto_mssg::_internal_as_is() const {
  return _impl_.as_is_;
}
inline bool texture_proto_mssg::as_is() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.as_is)
  return _internal_as_is();
}
inline void texture_proto_mssg::_internal_set_as_is(bool value) {
  
  _impl_.as_is_ = value;
}
inline void texture_proto_mssg::set_as_is(bool value) {
  _internal_set_as_is(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.as_is)
}

// uint32 width = 11;
inline void texture_proto_mssg::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t texture_proto_mssg::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t texture_proto_mssg::width() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.width)
  return _internal_width();
}
inline void texture_proto_mssg::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void texture_proto_mssg::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.width)
}

// uint32 height = 12;
inline void texture_proto_mssg::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t texture_proto_mssg::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t texture_proto_mssg::height() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.height)
  return _internal_height();
}
inline void texture_proto_mssg::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void texture_proto_mssg::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.height)
}

// uint32 component = 13;
inline void texture_proto_mssg::clear_component() {
  _impl_.component_ = 0u;
}
inline uint32_t texture_proto_mssg::_internal_component() const {
  return _impl_.component_;
}
inline uint32_t texture_proto_mssg::component() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.component)
  return _internal_component();
}
inline void texture_proto_mssg::_internal_set_component(uint32_t value) {
  
  _impl_.component_ = value;
}
inline void texture_proto_mssg::set_component(uint32_t value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.component)
}

// uint32 bits = 14;
inline void texture_proto_mssg::clear_bits() {
  _impl_.bits_ = 0u;
}
inline uint32_t texture_proto_mssg::_internal_bits() const {
  return _impl_.bits_;
}
inline uint32_t texture_proto_mssg::bits() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.bits)
  return _internal_bits();
}
inline void texture_proto_mssg::_internal_set_bits(uint32_t value) {
  
  _impl_.bits_ = value;
}
inline void texture_proto_mssg::set_bits(uint32_t value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.bits)
}

// uint32 dataSize = 15;
inline void texture_proto_mssg::clear_datasize() {
  _impl_.datasize_ = 0u;
}
inline uint32_t texture_proto_mssg::_internal_datasize() const {
  return _impl_.datasize_;
}
inline uint32_t texture_proto_mssg::datasize() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.dataSize)
  return _internal_datasize();
}
inline void texture_proto_mssg::_internal_set_datasize(uint32_t value) {
  
  _impl_.datasize_ = value;
}
inline void texture_proto_mssg::set_datasize(uint32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.dataSize)
}

// uint32 hash = 16;
inline void texture_proto_mssg::clear_hash() {
  _impl_.hash_ = 0u;
}
inline uint32_t texture_proto_mssg::_internal_hash() const {
  return _impl_.hash_;
}
inline uint32_t texture_proto_mssg::hash() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.hash)
  return _internal_hash();
}
inline void texture_proto_mssg::_internal_set_hash(uint32_t value) {
  
  _impl_.hash_ = value;
}
inline void texture_proto_mssg::set_hash(uint32_t value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:texture_proto_mssg.hash)
}

// bytes filename = 17;
inline void texture_proto_mssg::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& texture_proto_mssg::filename() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void texture_proto_mssg::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:texture_proto_mssg.filename)
}
inline std::string* texture_proto_mssg::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:texture_proto_mssg.filename)
  return _s;
}
inline const std::string& texture_proto_mssg::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void texture_proto_mssg::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* texture_proto_mssg::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* texture_proto_mssg::release_filename() {
  // @@protoc_insertion_point(field_release:texture_proto_mssg.filename)
  return _impl_.filename_.Release();
}
inline void texture_proto_mssg::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:texture_proto_mssg.filename)
}

// bytes pData = 18;
inline void texture_proto_mssg::clear_pdata() {
  _impl_.pdata_.ClearToEmpty();
}
inline const std::string& texture_proto_mssg::pdata() const {
  // @@protoc_insertion_point(field_get:texture_proto_mssg.pData)
  return _internal_pdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void texture_proto_mssg::set_pdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:texture_proto_mssg.pData)
}
inline std::string* texture_proto_mssg::mutable_pdata() {
  std::string* _s = _internal_mutable_pdata();
  // @@protoc_insertion_point(field_mutable:texture_proto_mssg.pData)
  return _s;
}
inline const std::string& texture_proto_mssg::_internal_pdata() const {
  return _impl_.pdata_.Get();
}
inline void texture_proto_mssg::_internal_set_pdata(const std::string& value) {
  
  _impl_.pdata_.Set(value, GetArenaForAllocation());
}
inline std::string* texture_proto_mssg::_internal_mutable_pdata() {
  
  return _impl_.pdata_.Mutable(GetArenaForAllocation());
}
inline std::string* texture_proto_mssg::release_pdata() {
  // @@protoc_insertion_point(field_release:texture_proto_mssg.pData)
  return _impl_.pdata_.Release();
}
inline void texture_proto_mssg::set_allocated_pdata(std::string* pdata) {
  if (pdata != nullptr) {
    
  } else {
    
  }
  _impl_.pdata_.SetAllocated(pdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pdata_.IsDefault()) {
    _impl_.pdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:texture_proto_mssg.pData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::texture_proto_mssg_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::texture_proto_mssg_MAG_FILTER> : ::std::true_type {};
template <> struct is_proto_enum< ::texture_proto_mssg_MIN_FILTER> : ::std::true_type {};
template <> struct is_proto_enum< ::texture_proto_mssg_WRAP> : ::std::true_type {};
template <> struct is_proto_enum< ::texture_proto_mssg_COMPONENT> : ::std::true_type {};
template <> struct is_proto_enum< ::texture_proto_mssg_EFORMAT> : ::std::true_type {};
template <> struct is_proto_enum< ::texture_proto_mssg_NCOMPONENT> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_texture_5fproto_2eproto
