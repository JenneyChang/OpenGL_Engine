// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skeleton_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skeleton_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skeleton_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skeleton_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skeleton_5fproto_2eproto {
  static const uint32_t offsets[];
};
class skeleton_proto_mssg;
struct skeleton_proto_mssgDefaultTypeInternal;
extern skeleton_proto_mssgDefaultTypeInternal _skeleton_proto_mssg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::skeleton_proto_mssg* Arena::CreateMaybeMessage<::skeleton_proto_mssg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class skeleton_proto_mssg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:skeleton_proto_mssg) */ {
 public:
  inline skeleton_proto_mssg() : skeleton_proto_mssg(nullptr) {}
  ~skeleton_proto_mssg() override;
  explicit PROTOBUF_CONSTEXPR skeleton_proto_mssg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  skeleton_proto_mssg(const skeleton_proto_mssg& from);
  skeleton_proto_mssg(skeleton_proto_mssg&& from) noexcept
    : skeleton_proto_mssg() {
    *this = ::std::move(from);
  }

  inline skeleton_proto_mssg& operator=(const skeleton_proto_mssg& from) {
    CopyFrom(from);
    return *this;
  }
  inline skeleton_proto_mssg& operator=(skeleton_proto_mssg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const skeleton_proto_mssg& default_instance() {
    return *internal_default_instance();
  }
  static inline const skeleton_proto_mssg* internal_default_instance() {
    return reinterpret_cast<const skeleton_proto_mssg*>(
               &_skeleton_proto_mssg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(skeleton_proto_mssg& a, skeleton_proto_mssg& b) {
    a.Swap(&b);
  }
  inline void Swap(skeleton_proto_mssg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(skeleton_proto_mssg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  skeleton_proto_mssg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<skeleton_proto_mssg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const skeleton_proto_mssg& from);
  void MergeFrom(const skeleton_proto_mssg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(skeleton_proto_mssg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skeleton_proto_mssg";
  }
  protected:
  explicit skeleton_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 5,
    kParentNameFieldNumber = 6,
    kNodeIndexFieldNumber = 1,
    kParentIndexFieldNumber = 2,
    kPrevIndexFieldNumber = 3,
    kNextIndexFieldNumber = 4,
  };
  // bytes nodeName = 5;
  void clear_nodename();
  const std::string& nodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // bytes parentName = 6;
  void clear_parentname();
  const std::string& parentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentname();
  PROTOBUF_NODISCARD std::string* release_parentname();
  void set_allocated_parentname(std::string* parentname);
  private:
  const std::string& _internal_parentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentname(const std::string& value);
  std::string* _internal_mutable_parentname();
  public:

  // sint32 nodeIndex = 1;
  void clear_nodeindex();
  int32_t nodeindex() const;
  void set_nodeindex(int32_t value);
  private:
  int32_t _internal_nodeindex() const;
  void _internal_set_nodeindex(int32_t value);
  public:

  // sint32 parentIndex = 2;
  void clear_parentindex();
  int32_t parentindex() const;
  void set_parentindex(int32_t value);
  private:
  int32_t _internal_parentindex() const;
  void _internal_set_parentindex(int32_t value);
  public:

  // sint32 prevIndex = 3;
  void clear_previndex();
  int32_t previndex() const;
  void set_previndex(int32_t value);
  private:
  int32_t _internal_previndex() const;
  void _internal_set_previndex(int32_t value);
  public:

  // sint32 nextIndex = 4;
  void clear_nextindex();
  int32_t nextindex() const;
  void set_nextindex(int32_t value);
  private:
  int32_t _internal_nextindex() const;
  void _internal_set_nextindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:skeleton_proto_mssg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentname_;
    int32_t nodeindex_;
    int32_t parentindex_;
    int32_t previndex_;
    int32_t nextindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_skeleton_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// skeleton_proto_mssg

// sint32 nodeIndex = 1;
inline void skeleton_proto_mssg::clear_nodeindex() {
  _impl_.nodeindex_ = 0;
}
inline int32_t skeleton_proto_mssg::_internal_nodeindex() const {
  return _impl_.nodeindex_;
}
inline int32_t skeleton_proto_mssg::nodeindex() const {
  // @@protoc_insertion_point(field_get:skeleton_proto_mssg.nodeIndex)
  return _internal_nodeindex();
}
inline void skeleton_proto_mssg::_internal_set_nodeindex(int32_t value) {
  
  _impl_.nodeindex_ = value;
}
inline void skeleton_proto_mssg::set_nodeindex(int32_t value) {
  _internal_set_nodeindex(value);
  // @@protoc_insertion_point(field_set:skeleton_proto_mssg.nodeIndex)
}

// sint32 parentIndex = 2;
inline void skeleton_proto_mssg::clear_parentindex() {
  _impl_.parentindex_ = 0;
}
inline int32_t skeleton_proto_mssg::_internal_parentindex() const {
  return _impl_.parentindex_;
}
inline int32_t skeleton_proto_mssg::parentindex() const {
  // @@protoc_insertion_point(field_get:skeleton_proto_mssg.parentIndex)
  return _internal_parentindex();
}
inline void skeleton_proto_mssg::_internal_set_parentindex(int32_t value) {
  
  _impl_.parentindex_ = value;
}
inline void skeleton_proto_mssg::set_parentindex(int32_t value) {
  _internal_set_parentindex(value);
  // @@protoc_insertion_point(field_set:skeleton_proto_mssg.parentIndex)
}

// sint32 prevIndex = 3;
inline void skeleton_proto_mssg::clear_previndex() {
  _impl_.previndex_ = 0;
}
inline int32_t skeleton_proto_mssg::_internal_previndex() const {
  return _impl_.previndex_;
}
inline int32_t skeleton_proto_mssg::previndex() const {
  // @@protoc_insertion_point(field_get:skeleton_proto_mssg.prevIndex)
  return _internal_previndex();
}
inline void skeleton_proto_mssg::_internal_set_previndex(int32_t value) {
  
  _impl_.previndex_ = value;
}
inline void skeleton_proto_mssg::set_previndex(int32_t value) {
  _internal_set_previndex(value);
  // @@protoc_insertion_point(field_set:skeleton_proto_mssg.prevIndex)
}

// sint32 nextIndex = 4;
inline void skeleton_proto_mssg::clear_nextindex() {
  _impl_.nextindex_ = 0;
}
inline int32_t skeleton_proto_mssg::_internal_nextindex() const {
  return _impl_.nextindex_;
}
inline int32_t skeleton_proto_mssg::nextindex() const {
  // @@protoc_insertion_point(field_get:skeleton_proto_mssg.nextIndex)
  return _internal_nextindex();
}
inline void skeleton_proto_mssg::_internal_set_nextindex(int32_t value) {
  
  _impl_.nextindex_ = value;
}
inline void skeleton_proto_mssg::set_nextindex(int32_t value) {
  _internal_set_nextindex(value);
  // @@protoc_insertion_point(field_set:skeleton_proto_mssg.nextIndex)
}

// bytes nodeName = 5;
inline void skeleton_proto_mssg::clear_nodename() {
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& skeleton_proto_mssg::nodename() const {
  // @@protoc_insertion_point(field_get:skeleton_proto_mssg.nodeName)
  return _internal_nodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void skeleton_proto_mssg::set_nodename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodename_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skeleton_proto_mssg.nodeName)
}
inline std::string* skeleton_proto_mssg::mutable_nodename() {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:skeleton_proto_mssg.nodeName)
  return _s;
}
inline const std::string& skeleton_proto_mssg::_internal_nodename() const {
  return _impl_.nodename_.Get();
}
inline void skeleton_proto_mssg::_internal_set_nodename(const std::string& value) {
  
  _impl_.nodename_.Set(value, GetArenaForAllocation());
}
inline std::string* skeleton_proto_mssg::_internal_mutable_nodename() {
  
  return _impl_.nodename_.Mutable(GetArenaForAllocation());
}
inline std::string* skeleton_proto_mssg::release_nodename() {
  // @@protoc_insertion_point(field_release:skeleton_proto_mssg.nodeName)
  return _impl_.nodename_.Release();
}
inline void skeleton_proto_mssg::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  _impl_.nodename_.SetAllocated(nodename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodename_.IsDefault()) {
    _impl_.nodename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skeleton_proto_mssg.nodeName)
}

// bytes parentName = 6;
inline void skeleton_proto_mssg::clear_parentname() {
  _impl_.parentname_.ClearToEmpty();
}
inline const std::string& skeleton_proto_mssg::parentname() const {
  // @@protoc_insertion_point(field_get:skeleton_proto_mssg.parentName)
  return _internal_parentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void skeleton_proto_mssg::set_parentname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parentname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skeleton_proto_mssg.parentName)
}
inline std::string* skeleton_proto_mssg::mutable_parentname() {
  std::string* _s = _internal_mutable_parentname();
  // @@protoc_insertion_point(field_mutable:skeleton_proto_mssg.parentName)
  return _s;
}
inline const std::string& skeleton_proto_mssg::_internal_parentname() const {
  return _impl_.parentname_.Get();
}
inline void skeleton_proto_mssg::_internal_set_parentname(const std::string& value) {
  
  _impl_.parentname_.Set(value, GetArenaForAllocation());
}
inline std::string* skeleton_proto_mssg::_internal_mutable_parentname() {
  
  return _impl_.parentname_.Mutable(GetArenaForAllocation());
}
inline std::string* skeleton_proto_mssg::release_parentname() {
  // @@protoc_insertion_point(field_release:skeleton_proto_mssg.parentName)
  return _impl_.parentname_.Release();
}
inline void skeleton_proto_mssg::set_allocated_parentname(std::string* parentname) {
  if (parentname != nullptr) {
    
  } else {
    
  }
  _impl_.parentname_.SetAllocated(parentname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parentname_.IsDefault()) {
    _impl_.parentname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skeleton_proto_mssg.parentName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skeleton_5fproto_2eproto
