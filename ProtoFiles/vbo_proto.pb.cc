// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vbo_proto.proto

#include "vbo_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR vbo_proto_mssg::vbo_proto_mssg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/0
  , /*decltype(_impl_.component_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.attribindex_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.datasize_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct vbo_proto_mssgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR vbo_proto_mssgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~vbo_proto_mssgDefaultTypeInternal() {}
  union {
    vbo_proto_mssg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 vbo_proto_mssgDefaultTypeInternal _vbo_proto_mssg_default_instance_;
bool vbo_proto_mssg_TARGET_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vbo_proto_mssg_TARGET_strings[2] = {};

static const char vbo_proto_mssg_TARGET_names[] =
  "ARRAY_BUFFER"
  "ELEMENT_ARRAY_BUFFER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vbo_proto_mssg_TARGET_entries[] = {
  { {vbo_proto_mssg_TARGET_names + 0, 12}, 0 },
  { {vbo_proto_mssg_TARGET_names + 12, 20}, 1 },
};

static const int vbo_proto_mssg_TARGET_entries_by_number[] = {
  0, // 0 -> ARRAY_BUFFER
  1, // 1 -> ELEMENT_ARRAY_BUFFER
};

const std::string& vbo_proto_mssg_TARGET_Name(
    vbo_proto_mssg_TARGET value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vbo_proto_mssg_TARGET_entries,
          vbo_proto_mssg_TARGET_entries_by_number,
          2, vbo_proto_mssg_TARGET_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vbo_proto_mssg_TARGET_entries,
      vbo_proto_mssg_TARGET_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vbo_proto_mssg_TARGET_strings[idx].get();
}
bool vbo_proto_mssg_TARGET_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vbo_proto_mssg_TARGET* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vbo_proto_mssg_TARGET_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<vbo_proto_mssg_TARGET>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr vbo_proto_mssg_TARGET vbo_proto_mssg::ARRAY_BUFFER;
constexpr vbo_proto_mssg_TARGET vbo_proto_mssg::ELEMENT_ARRAY_BUFFER;
constexpr vbo_proto_mssg_TARGET vbo_proto_mssg::TARGET_MIN;
constexpr vbo_proto_mssg_TARGET vbo_proto_mssg::TARGET_MAX;
constexpr int vbo_proto_mssg::TARGET_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool vbo_proto_mssg_COMPONENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vbo_proto_mssg_COMPONENT_strings[8] = {};

static const char vbo_proto_mssg_COMPONENT_names[] =
  "BYTE"
  "DOUBLE"
  "FLOAT"
  "INT"
  "SHORT"
  "UNSIGNED_BYTE"
  "UNSIGNED_INT"
  "UNSIGNED_SHORT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vbo_proto_mssg_COMPONENT_entries[] = {
  { {vbo_proto_mssg_COMPONENT_names + 0, 4}, 0 },
  { {vbo_proto_mssg_COMPONENT_names + 4, 6}, 7 },
  { {vbo_proto_mssg_COMPONENT_names + 10, 5}, 6 },
  { {vbo_proto_mssg_COMPONENT_names + 15, 3}, 4 },
  { {vbo_proto_mssg_COMPONENT_names + 18, 5}, 2 },
  { {vbo_proto_mssg_COMPONENT_names + 23, 13}, 1 },
  { {vbo_proto_mssg_COMPONENT_names + 36, 12}, 5 },
  { {vbo_proto_mssg_COMPONENT_names + 48, 14}, 3 },
};

static const int vbo_proto_mssg_COMPONENT_entries_by_number[] = {
  0, // 0 -> BYTE
  5, // 1 -> UNSIGNED_BYTE
  4, // 2 -> SHORT
  7, // 3 -> UNSIGNED_SHORT
  3, // 4 -> INT
  6, // 5 -> UNSIGNED_INT
  2, // 6 -> FLOAT
  1, // 7 -> DOUBLE
};

const std::string& vbo_proto_mssg_COMPONENT_Name(
    vbo_proto_mssg_COMPONENT value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vbo_proto_mssg_COMPONENT_entries,
          vbo_proto_mssg_COMPONENT_entries_by_number,
          8, vbo_proto_mssg_COMPONENT_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vbo_proto_mssg_COMPONENT_entries,
      vbo_proto_mssg_COMPONENT_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vbo_proto_mssg_COMPONENT_strings[idx].get();
}
bool vbo_proto_mssg_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vbo_proto_mssg_COMPONENT* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vbo_proto_mssg_COMPONENT_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<vbo_proto_mssg_COMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::BYTE;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::UNSIGNED_BYTE;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::SHORT;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::UNSIGNED_SHORT;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::INT;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::UNSIGNED_INT;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::FLOAT;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::DOUBLE;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::COMPONENT_MIN;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg::COMPONENT_MAX;
constexpr int vbo_proto_mssg::COMPONENT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool vbo_proto_mssg_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> vbo_proto_mssg_TYPE_strings[9] = {};

static const char vbo_proto_mssg_TYPE_names[] =
  "MAT2"
  "MAT3"
  "MAT4"
  "MATRIX"
  "SCALAR"
  "VEC2"
  "VEC3"
  "VEC4"
  "VECTOR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry vbo_proto_mssg_TYPE_entries[] = {
  { {vbo_proto_mssg_TYPE_names + 0, 4}, 3 },
  { {vbo_proto_mssg_TYPE_names + 4, 4}, 4 },
  { {vbo_proto_mssg_TYPE_names + 8, 4}, 5 },
  { {vbo_proto_mssg_TYPE_names + 12, 6}, 8 },
  { {vbo_proto_mssg_TYPE_names + 18, 6}, 6 },
  { {vbo_proto_mssg_TYPE_names + 24, 4}, 0 },
  { {vbo_proto_mssg_TYPE_names + 28, 4}, 1 },
  { {vbo_proto_mssg_TYPE_names + 32, 4}, 2 },
  { {vbo_proto_mssg_TYPE_names + 36, 6}, 7 },
};

static const int vbo_proto_mssg_TYPE_entries_by_number[] = {
  5, // 0 -> VEC2
  6, // 1 -> VEC3
  7, // 2 -> VEC4
  0, // 3 -> MAT2
  1, // 4 -> MAT3
  2, // 5 -> MAT4
  4, // 6 -> SCALAR
  8, // 7 -> VECTOR
  3, // 8 -> MATRIX
};

const std::string& vbo_proto_mssg_TYPE_Name(
    vbo_proto_mssg_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          vbo_proto_mssg_TYPE_entries,
          vbo_proto_mssg_TYPE_entries_by_number,
          9, vbo_proto_mssg_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      vbo_proto_mssg_TYPE_entries,
      vbo_proto_mssg_TYPE_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     vbo_proto_mssg_TYPE_strings[idx].get();
}
bool vbo_proto_mssg_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vbo_proto_mssg_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      vbo_proto_mssg_TYPE_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<vbo_proto_mssg_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::VEC2;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::VEC3;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::VEC4;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::MAT2;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::MAT3;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::MAT4;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::SCALAR;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::VECTOR;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::MATRIX;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::TYPE_MIN;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg::TYPE_MAX;
constexpr int vbo_proto_mssg::TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class vbo_proto_mssg::_Internal {
 public:
};

vbo_proto_mssg::vbo_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vbo_proto_mssg)
}
vbo_proto_mssg::vbo_proto_mssg(const vbo_proto_mssg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  vbo_proto_mssg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pdata_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.component_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.attribindex_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.datasize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.pdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pdata().empty()) {
    _this->_impl_.pdata_.Set(from._internal_pdata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.target_, &from._impl_.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datasize_) -
    reinterpret_cast<char*>(&_impl_.target_)) + sizeof(_impl_.datasize_));
  // @@protoc_insertion_point(copy_constructor:vbo_proto_mssg)
}

inline void vbo_proto_mssg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pdata_){}
    , decltype(_impl_.target_){0}
    , decltype(_impl_.component_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.attribindex_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.datasize_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

vbo_proto_mssg::~vbo_proto_mssg() {
  // @@protoc_insertion_point(destructor:vbo_proto_mssg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void vbo_proto_mssg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pdata_.Destroy();
}

void vbo_proto_mssg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void vbo_proto_mssg::Clear() {
// @@protoc_insertion_point(message_clear_start:vbo_proto_mssg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pdata_.ClearToEmpty();
  ::memset(&_impl_.target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datasize_) -
      reinterpret_cast<char*>(&_impl_.target_)) + sizeof(_impl_.datasize_));
  _internal_metadata_.Clear<std::string>();
}

const char* vbo_proto_mssg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vbo_proto_mssg.TARGET target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::vbo_proto_mssg_TARGET>(val));
        } else
          goto handle_unusual;
        continue;
      // .vbo_proto_mssg.COMPONENT component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_component(static_cast<::vbo_proto_mssg_COMPONENT>(val));
        } else
          goto handle_unusual;
        continue;
      // .vbo_proto_mssg.TYPE type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vbo_proto_mssg_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attribIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.attribindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_pdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* vbo_proto_mssg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vbo_proto_mssg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vbo_proto_mssg.TARGET target = 1;
  if (this->_internal_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_target(), target);
  }

  // .vbo_proto_mssg.COMPONENT component = 2;
  if (this->_internal_component() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_component(), target);
  }

  // .vbo_proto_mssg.TYPE type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  // uint32 attribIndex = 5;
  if (this->_internal_attribindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attribindex(), target);
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // uint32 dataSize = 7;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_datasize(), target);
  }

  // bytes pData = 8;
  if (!this->_internal_pdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_pdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vbo_proto_mssg)
  return target;
}

size_t vbo_proto_mssg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vbo_proto_mssg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pData = 8;
  if (!this->_internal_pdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pdata());
  }

  // .vbo_proto_mssg.TARGET target = 1;
  if (this->_internal_target() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_target());
  }

  // .vbo_proto_mssg.COMPONENT component = 2;
  if (this->_internal_component() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_component());
  }

  // .vbo_proto_mssg.TYPE type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 attribIndex = 5;
  if (this->_internal_attribindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribindex());
  }

  // uint32 count = 6;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 dataSize = 7;
  if (this->_internal_datasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datasize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vbo_proto_mssg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const vbo_proto_mssg*>(
      &from));
}

void vbo_proto_mssg::MergeFrom(const vbo_proto_mssg& from) {
  vbo_proto_mssg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:vbo_proto_mssg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pdata().empty()) {
    _this->_internal_set_pdata(from._internal_pdata());
  }
  if (from._internal_target() != 0) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_component() != 0) {
    _this->_internal_set_component(from._internal_component());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_attribindex() != 0) {
    _this->_internal_set_attribindex(from._internal_attribindex());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_datasize() != 0) {
    _this->_internal_set_datasize(from._internal_datasize());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void vbo_proto_mssg::CopyFrom(const vbo_proto_mssg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vbo_proto_mssg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vbo_proto_mssg::IsInitialized() const {
  return true;
}

void vbo_proto_mssg::InternalSwap(vbo_proto_mssg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pdata_, lhs_arena,
      &other->_impl_.pdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(vbo_proto_mssg, _impl_.datasize_)
      + sizeof(vbo_proto_mssg::_impl_.datasize_)
      - PROTOBUF_FIELD_OFFSET(vbo_proto_mssg, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

std::string vbo_proto_mssg::GetTypeName() const {
  return "vbo_proto_mssg";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vbo_proto_mssg*
Arena::CreateMaybeMessage< ::vbo_proto_mssg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vbo_proto_mssg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
