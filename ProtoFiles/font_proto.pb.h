// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_font_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_font_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "key_proto.pb.h"
#include "texture_proto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_font_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_font_5fproto_2eproto {
  static const uint32_t offsets[];
};
class font_proto_mssg;
struct font_proto_mssgDefaultTypeInternal;
extern font_proto_mssgDefaultTypeInternal _font_proto_mssg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::font_proto_mssg* Arena::CreateMaybeMessage<::font_proto_mssg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class font_proto_mssg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:font_proto_mssg) */ {
 public:
  inline font_proto_mssg() : font_proto_mssg(nullptr) {}
  ~font_proto_mssg() override;
  explicit PROTOBUF_CONSTEXPR font_proto_mssg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  font_proto_mssg(const font_proto_mssg& from);
  font_proto_mssg(font_proto_mssg&& from) noexcept
    : font_proto_mssg() {
    *this = ::std::move(from);
  }

  inline font_proto_mssg& operator=(const font_proto_mssg& from) {
    CopyFrom(from);
    return *this;
  }
  inline font_proto_mssg& operator=(font_proto_mssg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const font_proto_mssg& default_instance() {
    return *internal_default_instance();
  }
  static inline const font_proto_mssg* internal_default_instance() {
    return reinterpret_cast<const font_proto_mssg*>(
               &_font_proto_mssg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(font_proto_mssg& a, font_proto_mssg& b) {
    a.Swap(&b);
  }
  inline void Swap(font_proto_mssg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(font_proto_mssg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  font_proto_mssg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<font_proto_mssg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const font_proto_mssg& from);
  void MergeFrom(const font_proto_mssg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(font_proto_mssg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "font_proto_mssg";
  }
  protected:
  explicit font_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kFontnameFieldNumber = 1,
    kFontTexFieldNumber = 2,
  };
  // repeated .key_proto_mssg keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::key_proto_mssg* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::key_proto_mssg >*
      mutable_keys();
  private:
  const ::key_proto_mssg& _internal_keys(int index) const;
  ::key_proto_mssg* _internal_add_keys();
  public:
  const ::key_proto_mssg& keys(int index) const;
  ::key_proto_mssg* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::key_proto_mssg >&
      keys() const;

  // bytes fontname = 1;
  void clear_fontname();
  const std::string& fontname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fontname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fontname();
  PROTOBUF_NODISCARD std::string* release_fontname();
  void set_allocated_fontname(std::string* fontname);
  private:
  const std::string& _internal_fontname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fontname(const std::string& value);
  std::string* _internal_mutable_fontname();
  public:

  // .texture_proto_mssg fontTex = 2;
  bool has_fonttex() const;
  private:
  bool _internal_has_fonttex() const;
  public:
  void clear_fonttex();
  const ::texture_proto_mssg& fonttex() const;
  PROTOBUF_NODISCARD ::texture_proto_mssg* release_fonttex();
  ::texture_proto_mssg* mutable_fonttex();
  void set_allocated_fonttex(::texture_proto_mssg* fonttex);
  private:
  const ::texture_proto_mssg& _internal_fonttex() const;
  ::texture_proto_mssg* _internal_mutable_fonttex();
  public:
  void unsafe_arena_set_allocated_fonttex(
      ::texture_proto_mssg* fonttex);
  ::texture_proto_mssg* unsafe_arena_release_fonttex();

  // @@protoc_insertion_point(class_scope:font_proto_mssg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::key_proto_mssg > keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fontname_;
    ::texture_proto_mssg* fonttex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_font_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// font_proto_mssg

// bytes fontname = 1;
inline void font_proto_mssg::clear_fontname() {
  _impl_.fontname_.ClearToEmpty();
}
inline const std::string& font_proto_mssg::fontname() const {
  // @@protoc_insertion_point(field_get:font_proto_mssg.fontname)
  return _internal_fontname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void font_proto_mssg::set_fontname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fontname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:font_proto_mssg.fontname)
}
inline std::string* font_proto_mssg::mutable_fontname() {
  std::string* _s = _internal_mutable_fontname();
  // @@protoc_insertion_point(field_mutable:font_proto_mssg.fontname)
  return _s;
}
inline const std::string& font_proto_mssg::_internal_fontname() const {
  return _impl_.fontname_.Get();
}
inline void font_proto_mssg::_internal_set_fontname(const std::string& value) {
  
  _impl_.fontname_.Set(value, GetArenaForAllocation());
}
inline std::string* font_proto_mssg::_internal_mutable_fontname() {
  
  return _impl_.fontname_.Mutable(GetArenaForAllocation());
}
inline std::string* font_proto_mssg::release_fontname() {
  // @@protoc_insertion_point(field_release:font_proto_mssg.fontname)
  return _impl_.fontname_.Release();
}
inline void font_proto_mssg::set_allocated_fontname(std::string* fontname) {
  if (fontname != nullptr) {
    
  } else {
    
  }
  _impl_.fontname_.SetAllocated(fontname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fontname_.IsDefault()) {
    _impl_.fontname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:font_proto_mssg.fontname)
}

// .texture_proto_mssg fontTex = 2;
inline bool font_proto_mssg::_internal_has_fonttex() const {
  return this != internal_default_instance() && _impl_.fonttex_ != nullptr;
}
inline bool font_proto_mssg::has_fonttex() const {
  return _internal_has_fonttex();
}
inline const ::texture_proto_mssg& font_proto_mssg::_internal_fonttex() const {
  const ::texture_proto_mssg* p = _impl_.fonttex_;
  return p != nullptr ? *p : reinterpret_cast<const ::texture_proto_mssg&>(
      ::_texture_proto_mssg_default_instance_);
}
inline const ::texture_proto_mssg& font_proto_mssg::fonttex() const {
  // @@protoc_insertion_point(field_get:font_proto_mssg.fontTex)
  return _internal_fonttex();
}
inline void font_proto_mssg::unsafe_arena_set_allocated_fonttex(
    ::texture_proto_mssg* fonttex) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fonttex_);
  }
  _impl_.fonttex_ = fonttex;
  if (fonttex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:font_proto_mssg.fontTex)
}
inline ::texture_proto_mssg* font_proto_mssg::release_fonttex() {
  
  ::texture_proto_mssg* temp = _impl_.fonttex_;
  _impl_.fonttex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::texture_proto_mssg* font_proto_mssg::unsafe_arena_release_fonttex() {
  // @@protoc_insertion_point(field_release:font_proto_mssg.fontTex)
  
  ::texture_proto_mssg* temp = _impl_.fonttex_;
  _impl_.fonttex_ = nullptr;
  return temp;
}
inline ::texture_proto_mssg* font_proto_mssg::_internal_mutable_fonttex() {
  
  if (_impl_.fonttex_ == nullptr) {
    auto* p = CreateMaybeMessage<::texture_proto_mssg>(GetArenaForAllocation());
    _impl_.fonttex_ = p;
  }
  return _impl_.fonttex_;
}
inline ::texture_proto_mssg* font_proto_mssg::mutable_fonttex() {
  ::texture_proto_mssg* _msg = _internal_mutable_fonttex();
  // @@protoc_insertion_point(field_mutable:font_proto_mssg.fontTex)
  return _msg;
}
inline void font_proto_mssg::set_allocated_fonttex(::texture_proto_mssg* fonttex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fonttex_);
  }
  if (fonttex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fonttex));
    if (message_arena != submessage_arena) {
      fonttex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fonttex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fonttex_ = fonttex;
  // @@protoc_insertion_point(field_set_allocated:font_proto_mssg.fontTex)
}

// repeated .key_proto_mssg keys = 3;
inline int font_proto_mssg::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int font_proto_mssg::keys_size() const {
  return _internal_keys_size();
}
inline ::key_proto_mssg* font_proto_mssg::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:font_proto_mssg.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::key_proto_mssg >*
font_proto_mssg::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:font_proto_mssg.keys)
  return &_impl_.keys_;
}
inline const ::key_proto_mssg& font_proto_mssg::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::key_proto_mssg& font_proto_mssg::keys(int index) const {
  // @@protoc_insertion_point(field_get:font_proto_mssg.keys)
  return _internal_keys(index);
}
inline ::key_proto_mssg* font_proto_mssg::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::key_proto_mssg* font_proto_mssg::add_keys() {
  ::key_proto_mssg* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:font_proto_mssg.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::key_proto_mssg >&
font_proto_mssg::keys() const {
  // @@protoc_insertion_point(field_list:font_proto_mssg.keys)
  return _impl_.keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_font_5fproto_2eproto
