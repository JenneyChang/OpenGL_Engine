// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame_proto.proto

#include "frame_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR frame_proto_mssg::frame_proto_mssg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bones_)*/{}
  , /*decltype(_impl_.frameno_)*/0u
  , /*decltype(_impl_.keytime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct frame_proto_mssgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR frame_proto_mssgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~frame_proto_mssgDefaultTypeInternal() {}
  union {
    frame_proto_mssg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 frame_proto_mssgDefaultTypeInternal _frame_proto_mssg_default_instance_;

// ===================================================================

class frame_proto_mssg::_Internal {
 public:
};

void frame_proto_mssg::clear_bones() {
  _impl_.bones_.Clear();
}
frame_proto_mssg::frame_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:frame_proto_mssg)
}
frame_proto_mssg::frame_proto_mssg(const frame_proto_mssg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  frame_proto_mssg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bones_){from._impl_.bones_}
    , decltype(_impl_.frameno_){}
    , decltype(_impl_.keytime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.frameno_, &from._impl_.frameno_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keytime_) -
    reinterpret_cast<char*>(&_impl_.frameno_)) + sizeof(_impl_.keytime_));
  // @@protoc_insertion_point(copy_constructor:frame_proto_mssg)
}

inline void frame_proto_mssg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bones_){arena}
    , decltype(_impl_.frameno_){0u}
    , decltype(_impl_.keytime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

frame_proto_mssg::~frame_proto_mssg() {
  // @@protoc_insertion_point(destructor:frame_proto_mssg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void frame_proto_mssg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bones_.~RepeatedPtrField();
}

void frame_proto_mssg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void frame_proto_mssg::Clear() {
// @@protoc_insertion_point(message_clear_start:frame_proto_mssg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bones_.Clear();
  ::memset(&_impl_.frameno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.keytime_) -
      reinterpret_cast<char*>(&_impl_.frameno_)) + sizeof(_impl_.keytime_));
  _internal_metadata_.Clear<std::string>();
}

const char* frame_proto_mssg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 frameNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frameno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float keytime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.keytime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .bone_proto_mssg bones = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* frame_proto_mssg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:frame_proto_mssg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frameNo = 1;
  if (this->_internal_frameno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frameno(), target);
  }

  // float keytime = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_keytime = this->_internal_keytime();
  uint32_t raw_keytime;
  memcpy(&raw_keytime, &tmp_keytime, sizeof(tmp_keytime));
  if (raw_keytime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_keytime(), target);
  }

  // repeated .bone_proto_mssg bones = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bones_size()); i < n; i++) {
    const auto& repfield = this->_internal_bones(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frame_proto_mssg)
  return target;
}

size_t frame_proto_mssg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frame_proto_mssg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bone_proto_mssg bones = 3;
  total_size += 1UL * this->_internal_bones_size();
  for (const auto& msg : this->_impl_.bones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 frameNo = 1;
  if (this->_internal_frameno() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frameno());
  }

  // float keytime = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_keytime = this->_internal_keytime();
  uint32_t raw_keytime;
  memcpy(&raw_keytime, &tmp_keytime, sizeof(tmp_keytime));
  if (raw_keytime != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void frame_proto_mssg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const frame_proto_mssg*>(
      &from));
}

void frame_proto_mssg::MergeFrom(const frame_proto_mssg& from) {
  frame_proto_mssg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:frame_proto_mssg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bones_.MergeFrom(from._impl_.bones_);
  if (from._internal_frameno() != 0) {
    _this->_internal_set_frameno(from._internal_frameno());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_keytime = from._internal_keytime();
  uint32_t raw_keytime;
  memcpy(&raw_keytime, &tmp_keytime, sizeof(tmp_keytime));
  if (raw_keytime != 0) {
    _this->_internal_set_keytime(from._internal_keytime());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void frame_proto_mssg::CopyFrom(const frame_proto_mssg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frame_proto_mssg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool frame_proto_mssg::IsInitialized() const {
  return true;
}

void frame_proto_mssg::InternalSwap(frame_proto_mssg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bones_.InternalSwap(&other->_impl_.bones_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(frame_proto_mssg, _impl_.keytime_)
      + sizeof(frame_proto_mssg::_impl_.keytime_)
      - PROTOBUF_FIELD_OFFSET(frame_proto_mssg, _impl_.frameno_)>(
          reinterpret_cast<char*>(&_impl_.frameno_),
          reinterpret_cast<char*>(&other->_impl_.frameno_));
}

std::string frame_proto_mssg::GetTypeName() const {
  return "frame_proto_mssg";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frame_proto_mssg*
Arena::CreateMaybeMessage< ::frame_proto_mssg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::frame_proto_mssg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
