// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vbo_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vbo_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vbo_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vbo_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vbo_5fproto_2eproto {
  static const uint32_t offsets[];
};
class vbo_proto_mssg;
struct vbo_proto_mssgDefaultTypeInternal;
extern vbo_proto_mssgDefaultTypeInternal _vbo_proto_mssg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::vbo_proto_mssg* Arena::CreateMaybeMessage<::vbo_proto_mssg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum vbo_proto_mssg_TARGET : int {
  vbo_proto_mssg_TARGET_ARRAY_BUFFER = 0,
  vbo_proto_mssg_TARGET_ELEMENT_ARRAY_BUFFER = 1,
  vbo_proto_mssg_TARGET_vbo_proto_mssg_TARGET_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vbo_proto_mssg_TARGET_vbo_proto_mssg_TARGET_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vbo_proto_mssg_TARGET_IsValid(int value);
constexpr vbo_proto_mssg_TARGET vbo_proto_mssg_TARGET_TARGET_MIN = vbo_proto_mssg_TARGET_ARRAY_BUFFER;
constexpr vbo_proto_mssg_TARGET vbo_proto_mssg_TARGET_TARGET_MAX = vbo_proto_mssg_TARGET_ELEMENT_ARRAY_BUFFER;
constexpr int vbo_proto_mssg_TARGET_TARGET_ARRAYSIZE = vbo_proto_mssg_TARGET_TARGET_MAX + 1;

const std::string& vbo_proto_mssg_TARGET_Name(vbo_proto_mssg_TARGET value);
template<typename T>
inline const std::string& vbo_proto_mssg_TARGET_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vbo_proto_mssg_TARGET>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vbo_proto_mssg_TARGET_Name.");
  return vbo_proto_mssg_TARGET_Name(static_cast<vbo_proto_mssg_TARGET>(enum_t_value));
}
bool vbo_proto_mssg_TARGET_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vbo_proto_mssg_TARGET* value);
enum vbo_proto_mssg_COMPONENT : int {
  vbo_proto_mssg_COMPONENT_BYTE = 0,
  vbo_proto_mssg_COMPONENT_UNSIGNED_BYTE = 1,
  vbo_proto_mssg_COMPONENT_SHORT = 2,
  vbo_proto_mssg_COMPONENT_UNSIGNED_SHORT = 3,
  vbo_proto_mssg_COMPONENT_INT = 4,
  vbo_proto_mssg_COMPONENT_UNSIGNED_INT = 5,
  vbo_proto_mssg_COMPONENT_FLOAT = 6,
  vbo_proto_mssg_COMPONENT_DOUBLE = 7,
  vbo_proto_mssg_COMPONENT_vbo_proto_mssg_COMPONENT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vbo_proto_mssg_COMPONENT_vbo_proto_mssg_COMPONENT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vbo_proto_mssg_COMPONENT_IsValid(int value);
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg_COMPONENT_COMPONENT_MIN = vbo_proto_mssg_COMPONENT_BYTE;
constexpr vbo_proto_mssg_COMPONENT vbo_proto_mssg_COMPONENT_COMPONENT_MAX = vbo_proto_mssg_COMPONENT_DOUBLE;
constexpr int vbo_proto_mssg_COMPONENT_COMPONENT_ARRAYSIZE = vbo_proto_mssg_COMPONENT_COMPONENT_MAX + 1;

const std::string& vbo_proto_mssg_COMPONENT_Name(vbo_proto_mssg_COMPONENT value);
template<typename T>
inline const std::string& vbo_proto_mssg_COMPONENT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vbo_proto_mssg_COMPONENT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vbo_proto_mssg_COMPONENT_Name.");
  return vbo_proto_mssg_COMPONENT_Name(static_cast<vbo_proto_mssg_COMPONENT>(enum_t_value));
}
bool vbo_proto_mssg_COMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vbo_proto_mssg_COMPONENT* value);
enum vbo_proto_mssg_TYPE : int {
  vbo_proto_mssg_TYPE_VEC2 = 0,
  vbo_proto_mssg_TYPE_VEC3 = 1,
  vbo_proto_mssg_TYPE_VEC4 = 2,
  vbo_proto_mssg_TYPE_MAT2 = 3,
  vbo_proto_mssg_TYPE_MAT3 = 4,
  vbo_proto_mssg_TYPE_MAT4 = 5,
  vbo_proto_mssg_TYPE_SCALAR = 6,
  vbo_proto_mssg_TYPE_VECTOR = 7,
  vbo_proto_mssg_TYPE_MATRIX = 8,
  vbo_proto_mssg_TYPE_vbo_proto_mssg_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  vbo_proto_mssg_TYPE_vbo_proto_mssg_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool vbo_proto_mssg_TYPE_IsValid(int value);
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg_TYPE_TYPE_MIN = vbo_proto_mssg_TYPE_VEC2;
constexpr vbo_proto_mssg_TYPE vbo_proto_mssg_TYPE_TYPE_MAX = vbo_proto_mssg_TYPE_MATRIX;
constexpr int vbo_proto_mssg_TYPE_TYPE_ARRAYSIZE = vbo_proto_mssg_TYPE_TYPE_MAX + 1;

const std::string& vbo_proto_mssg_TYPE_Name(vbo_proto_mssg_TYPE value);
template<typename T>
inline const std::string& vbo_proto_mssg_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, vbo_proto_mssg_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function vbo_proto_mssg_TYPE_Name.");
  return vbo_proto_mssg_TYPE_Name(static_cast<vbo_proto_mssg_TYPE>(enum_t_value));
}
bool vbo_proto_mssg_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, vbo_proto_mssg_TYPE* value);
// ===================================================================

class vbo_proto_mssg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:vbo_proto_mssg) */ {
 public:
  inline vbo_proto_mssg() : vbo_proto_mssg(nullptr) {}
  ~vbo_proto_mssg() override;
  explicit PROTOBUF_CONSTEXPR vbo_proto_mssg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vbo_proto_mssg(const vbo_proto_mssg& from);
  vbo_proto_mssg(vbo_proto_mssg&& from) noexcept
    : vbo_proto_mssg() {
    *this = ::std::move(from);
  }

  inline vbo_proto_mssg& operator=(const vbo_proto_mssg& from) {
    CopyFrom(from);
    return *this;
  }
  inline vbo_proto_mssg& operator=(vbo_proto_mssg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const vbo_proto_mssg& default_instance() {
    return *internal_default_instance();
  }
  static inline const vbo_proto_mssg* internal_default_instance() {
    return reinterpret_cast<const vbo_proto_mssg*>(
               &_vbo_proto_mssg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vbo_proto_mssg& a, vbo_proto_mssg& b) {
    a.Swap(&b);
  }
  inline void Swap(vbo_proto_mssg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vbo_proto_mssg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vbo_proto_mssg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vbo_proto_mssg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const vbo_proto_mssg& from);
  void MergeFrom(const vbo_proto_mssg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(vbo_proto_mssg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vbo_proto_mssg";
  }
  protected:
  explicit vbo_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef vbo_proto_mssg_TARGET TARGET;
  static constexpr TARGET ARRAY_BUFFER =
    vbo_proto_mssg_TARGET_ARRAY_BUFFER;
  static constexpr TARGET ELEMENT_ARRAY_BUFFER =
    vbo_proto_mssg_TARGET_ELEMENT_ARRAY_BUFFER;
  static inline bool TARGET_IsValid(int value) {
    return vbo_proto_mssg_TARGET_IsValid(value);
  }
  static constexpr TARGET TARGET_MIN =
    vbo_proto_mssg_TARGET_TARGET_MIN;
  static constexpr TARGET TARGET_MAX =
    vbo_proto_mssg_TARGET_TARGET_MAX;
  static constexpr int TARGET_ARRAYSIZE =
    vbo_proto_mssg_TARGET_TARGET_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TARGET_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TARGET>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TARGET_Name.");
    return vbo_proto_mssg_TARGET_Name(enum_t_value);
  }
  static inline bool TARGET_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TARGET* value) {
    return vbo_proto_mssg_TARGET_Parse(name, value);
  }

  typedef vbo_proto_mssg_COMPONENT COMPONENT;
  static constexpr COMPONENT BYTE =
    vbo_proto_mssg_COMPONENT_BYTE;
  static constexpr COMPONENT UNSIGNED_BYTE =
    vbo_proto_mssg_COMPONENT_UNSIGNED_BYTE;
  static constexpr COMPONENT SHORT =
    vbo_proto_mssg_COMPONENT_SHORT;
  static constexpr COMPONENT UNSIGNED_SHORT =
    vbo_proto_mssg_COMPONENT_UNSIGNED_SHORT;
  static constexpr COMPONENT INT =
    vbo_proto_mssg_COMPONENT_INT;
  static constexpr COMPONENT UNSIGNED_INT =
    vbo_proto_mssg_COMPONENT_UNSIGNED_INT;
  static constexpr COMPONENT FLOAT =
    vbo_proto_mssg_COMPONENT_FLOAT;
  static constexpr COMPONENT DOUBLE =
    vbo_proto_mssg_COMPONENT_DOUBLE;
  static inline bool COMPONENT_IsValid(int value) {
    return vbo_proto_mssg_COMPONENT_IsValid(value);
  }
  static constexpr COMPONENT COMPONENT_MIN =
    vbo_proto_mssg_COMPONENT_COMPONENT_MIN;
  static constexpr COMPONENT COMPONENT_MAX =
    vbo_proto_mssg_COMPONENT_COMPONENT_MAX;
  static constexpr int COMPONENT_ARRAYSIZE =
    vbo_proto_mssg_COMPONENT_COMPONENT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& COMPONENT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, COMPONENT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function COMPONENT_Name.");
    return vbo_proto_mssg_COMPONENT_Name(enum_t_value);
  }
  static inline bool COMPONENT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      COMPONENT* value) {
    return vbo_proto_mssg_COMPONENT_Parse(name, value);
  }

  typedef vbo_proto_mssg_TYPE TYPE;
  static constexpr TYPE VEC2 =
    vbo_proto_mssg_TYPE_VEC2;
  static constexpr TYPE VEC3 =
    vbo_proto_mssg_TYPE_VEC3;
  static constexpr TYPE VEC4 =
    vbo_proto_mssg_TYPE_VEC4;
  static constexpr TYPE MAT2 =
    vbo_proto_mssg_TYPE_MAT2;
  static constexpr TYPE MAT3 =
    vbo_proto_mssg_TYPE_MAT3;
  static constexpr TYPE MAT4 =
    vbo_proto_mssg_TYPE_MAT4;
  static constexpr TYPE SCALAR =
    vbo_proto_mssg_TYPE_SCALAR;
  static constexpr TYPE VECTOR =
    vbo_proto_mssg_TYPE_VECTOR;
  static constexpr TYPE MATRIX =
    vbo_proto_mssg_TYPE_MATRIX;
  static inline bool TYPE_IsValid(int value) {
    return vbo_proto_mssg_TYPE_IsValid(value);
  }
  static constexpr TYPE TYPE_MIN =
    vbo_proto_mssg_TYPE_TYPE_MIN;
  static constexpr TYPE TYPE_MAX =
    vbo_proto_mssg_TYPE_TYPE_MAX;
  static constexpr int TYPE_ARRAYSIZE =
    vbo_proto_mssg_TYPE_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TYPE_Name.");
    return vbo_proto_mssg_TYPE_Name(enum_t_value);
  }
  static inline bool TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TYPE* value) {
    return vbo_proto_mssg_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPDataFieldNumber = 8,
    kTargetFieldNumber = 1,
    kComponentFieldNumber = 2,
    kTypeFieldNumber = 3,
    kEnabledFieldNumber = 4,
    kAttribIndexFieldNumber = 5,
    kCountFieldNumber = 6,
    kDataSizeFieldNumber = 7,
  };
  // bytes pData = 8;
  void clear_pdata();
  const std::string& pdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pdata();
  PROTOBUF_NODISCARD std::string* release_pdata();
  void set_allocated_pdata(std::string* pdata);
  private:
  const std::string& _internal_pdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pdata(const std::string& value);
  std::string* _internal_mutable_pdata();
  public:

  // .vbo_proto_mssg.TARGET target = 1;
  void clear_target();
  ::vbo_proto_mssg_TARGET target() const;
  void set_target(::vbo_proto_mssg_TARGET value);
  private:
  ::vbo_proto_mssg_TARGET _internal_target() const;
  void _internal_set_target(::vbo_proto_mssg_TARGET value);
  public:

  // .vbo_proto_mssg.COMPONENT component = 2;
  void clear_component();
  ::vbo_proto_mssg_COMPONENT component() const;
  void set_component(::vbo_proto_mssg_COMPONENT value);
  private:
  ::vbo_proto_mssg_COMPONENT _internal_component() const;
  void _internal_set_component(::vbo_proto_mssg_COMPONENT value);
  public:

  // .vbo_proto_mssg.TYPE type = 3;
  void clear_type();
  ::vbo_proto_mssg_TYPE type() const;
  void set_type(::vbo_proto_mssg_TYPE value);
  private:
  ::vbo_proto_mssg_TYPE _internal_type() const;
  void _internal_set_type(::vbo_proto_mssg_TYPE value);
  public:

  // bool enabled = 4;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 attribIndex = 5;
  void clear_attribindex();
  uint32_t attribindex() const;
  void set_attribindex(uint32_t value);
  private:
  uint32_t _internal_attribindex() const;
  void _internal_set_attribindex(uint32_t value);
  public:

  // uint32 count = 6;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 dataSize = 7;
  void clear_datasize();
  uint32_t datasize() const;
  void set_datasize(uint32_t value);
  private:
  uint32_t _internal_datasize() const;
  void _internal_set_datasize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vbo_proto_mssg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pdata_;
    int target_;
    int component_;
    int type_;
    bool enabled_;
    uint32_t attribindex_;
    uint32_t count_;
    uint32_t datasize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vbo_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vbo_proto_mssg

// .vbo_proto_mssg.TARGET target = 1;
inline void vbo_proto_mssg::clear_target() {
  _impl_.target_ = 0;
}
inline ::vbo_proto_mssg_TARGET vbo_proto_mssg::_internal_target() const {
  return static_cast< ::vbo_proto_mssg_TARGET >(_impl_.target_);
}
inline ::vbo_proto_mssg_TARGET vbo_proto_mssg::target() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.target)
  return _internal_target();
}
inline void vbo_proto_mssg::_internal_set_target(::vbo_proto_mssg_TARGET value) {
  
  _impl_.target_ = value;
}
inline void vbo_proto_mssg::set_target(::vbo_proto_mssg_TARGET value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.target)
}

// .vbo_proto_mssg.COMPONENT component = 2;
inline void vbo_proto_mssg::clear_component() {
  _impl_.component_ = 0;
}
inline ::vbo_proto_mssg_COMPONENT vbo_proto_mssg::_internal_component() const {
  return static_cast< ::vbo_proto_mssg_COMPONENT >(_impl_.component_);
}
inline ::vbo_proto_mssg_COMPONENT vbo_proto_mssg::component() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.component)
  return _internal_component();
}
inline void vbo_proto_mssg::_internal_set_component(::vbo_proto_mssg_COMPONENT value) {
  
  _impl_.component_ = value;
}
inline void vbo_proto_mssg::set_component(::vbo_proto_mssg_COMPONENT value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.component)
}

// .vbo_proto_mssg.TYPE type = 3;
inline void vbo_proto_mssg::clear_type() {
  _impl_.type_ = 0;
}
inline ::vbo_proto_mssg_TYPE vbo_proto_mssg::_internal_type() const {
  return static_cast< ::vbo_proto_mssg_TYPE >(_impl_.type_);
}
inline ::vbo_proto_mssg_TYPE vbo_proto_mssg::type() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.type)
  return _internal_type();
}
inline void vbo_proto_mssg::_internal_set_type(::vbo_proto_mssg_TYPE value) {
  
  _impl_.type_ = value;
}
inline void vbo_proto_mssg::set_type(::vbo_proto_mssg_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.type)
}

// bool enabled = 4;
inline void vbo_proto_mssg::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool vbo_proto_mssg::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool vbo_proto_mssg::enabled() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.enabled)
  return _internal_enabled();
}
inline void vbo_proto_mssg::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void vbo_proto_mssg::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.enabled)
}

// uint32 attribIndex = 5;
inline void vbo_proto_mssg::clear_attribindex() {
  _impl_.attribindex_ = 0u;
}
inline uint32_t vbo_proto_mssg::_internal_attribindex() const {
  return _impl_.attribindex_;
}
inline uint32_t vbo_proto_mssg::attribindex() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.attribIndex)
  return _internal_attribindex();
}
inline void vbo_proto_mssg::_internal_set_attribindex(uint32_t value) {
  
  _impl_.attribindex_ = value;
}
inline void vbo_proto_mssg::set_attribindex(uint32_t value) {
  _internal_set_attribindex(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.attribIndex)
}

// uint32 count = 6;
inline void vbo_proto_mssg::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t vbo_proto_mssg::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t vbo_proto_mssg::count() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.count)
  return _internal_count();
}
inline void vbo_proto_mssg::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void vbo_proto_mssg::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.count)
}

// uint32 dataSize = 7;
inline void vbo_proto_mssg::clear_datasize() {
  _impl_.datasize_ = 0u;
}
inline uint32_t vbo_proto_mssg::_internal_datasize() const {
  return _impl_.datasize_;
}
inline uint32_t vbo_proto_mssg::datasize() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.dataSize)
  return _internal_datasize();
}
inline void vbo_proto_mssg::_internal_set_datasize(uint32_t value) {
  
  _impl_.datasize_ = value;
}
inline void vbo_proto_mssg::set_datasize(uint32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.dataSize)
}

// bytes pData = 8;
inline void vbo_proto_mssg::clear_pdata() {
  _impl_.pdata_.ClearToEmpty();
}
inline const std::string& vbo_proto_mssg::pdata() const {
  // @@protoc_insertion_point(field_get:vbo_proto_mssg.pData)
  return _internal_pdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void vbo_proto_mssg::set_pdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vbo_proto_mssg.pData)
}
inline std::string* vbo_proto_mssg::mutable_pdata() {
  std::string* _s = _internal_mutable_pdata();
  // @@protoc_insertion_point(field_mutable:vbo_proto_mssg.pData)
  return _s;
}
inline const std::string& vbo_proto_mssg::_internal_pdata() const {
  return _impl_.pdata_.Get();
}
inline void vbo_proto_mssg::_internal_set_pdata(const std::string& value) {
  
  _impl_.pdata_.Set(value, GetArenaForAllocation());
}
inline std::string* vbo_proto_mssg::_internal_mutable_pdata() {
  
  return _impl_.pdata_.Mutable(GetArenaForAllocation());
}
inline std::string* vbo_proto_mssg::release_pdata() {
  // @@protoc_insertion_point(field_release:vbo_proto_mssg.pData)
  return _impl_.pdata_.Release();
}
inline void vbo_proto_mssg::set_allocated_pdata(std::string* pdata) {
  if (pdata != nullptr) {
    
  } else {
    
  }
  _impl_.pdata_.SetAllocated(pdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pdata_.IsDefault()) {
    _impl_.pdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vbo_proto_mssg.pData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vbo_proto_mssg_TARGET> : ::std::true_type {};
template <> struct is_proto_enum< ::vbo_proto_mssg_COMPONENT> : ::std::true_type {};
template <> struct is_proto_enum< ::vbo_proto_mssg_TYPE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vbo_5fproto_2eproto
