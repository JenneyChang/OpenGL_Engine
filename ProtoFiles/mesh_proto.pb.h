// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesh_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mesh_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mesh_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "vbo_proto.pb.h"
#include "vec3_proto.pb.h"
#include "vec4_proto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mesh_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mesh_5fproto_2eproto {
  static const uint32_t offsets[];
};
class mesh_proto_mssg;
struct mesh_proto_mssgDefaultTypeInternal;
extern mesh_proto_mssgDefaultTypeInternal _mesh_proto_mssg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::mesh_proto_mssg* Arena::CreateMaybeMessage<::mesh_proto_mssg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum mesh_proto_mssg_RENDER_MODE : int {
  mesh_proto_mssg_RENDER_MODE_POINTS = 0,
  mesh_proto_mssg_RENDER_MODE_LINE = 1,
  mesh_proto_mssg_RENDER_MODE_LINE_LOOP = 2,
  mesh_proto_mssg_RENDER_MODE_LINE_STRIP = 3,
  mesh_proto_mssg_RENDER_MODE_TRIANGLES = 4,
  mesh_proto_mssg_RENDER_MODE_TRIANGLE_STRIP = 5,
  mesh_proto_mssg_RENDER_MODE_TRIANGLE_FAN = 6,
  mesh_proto_mssg_RENDER_MODE_mesh_proto_mssg_RENDER_MODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  mesh_proto_mssg_RENDER_MODE_mesh_proto_mssg_RENDER_MODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool mesh_proto_mssg_RENDER_MODE_IsValid(int value);
constexpr mesh_proto_mssg_RENDER_MODE mesh_proto_mssg_RENDER_MODE_RENDER_MODE_MIN = mesh_proto_mssg_RENDER_MODE_POINTS;
constexpr mesh_proto_mssg_RENDER_MODE mesh_proto_mssg_RENDER_MODE_RENDER_MODE_MAX = mesh_proto_mssg_RENDER_MODE_TRIANGLE_FAN;
constexpr int mesh_proto_mssg_RENDER_MODE_RENDER_MODE_ARRAYSIZE = mesh_proto_mssg_RENDER_MODE_RENDER_MODE_MAX + 1;

const std::string& mesh_proto_mssg_RENDER_MODE_Name(mesh_proto_mssg_RENDER_MODE value);
template<typename T>
inline const std::string& mesh_proto_mssg_RENDER_MODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, mesh_proto_mssg_RENDER_MODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function mesh_proto_mssg_RENDER_MODE_Name.");
  return mesh_proto_mssg_RENDER_MODE_Name(static_cast<mesh_proto_mssg_RENDER_MODE>(enum_t_value));
}
bool mesh_proto_mssg_RENDER_MODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, mesh_proto_mssg_RENDER_MODE* value);
// ===================================================================

class mesh_proto_mssg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mesh_proto_mssg) */ {
 public:
  inline mesh_proto_mssg() : mesh_proto_mssg(nullptr) {}
  ~mesh_proto_mssg() override;
  explicit PROTOBUF_CONSTEXPR mesh_proto_mssg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mesh_proto_mssg(const mesh_proto_mssg& from);
  mesh_proto_mssg(mesh_proto_mssg&& from) noexcept
    : mesh_proto_mssg() {
    *this = ::std::move(from);
  }

  inline mesh_proto_mssg& operator=(const mesh_proto_mssg& from) {
    CopyFrom(from);
    return *this;
  }
  inline mesh_proto_mssg& operator=(mesh_proto_mssg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const mesh_proto_mssg& default_instance() {
    return *internal_default_instance();
  }
  static inline const mesh_proto_mssg* internal_default_instance() {
    return reinterpret_cast<const mesh_proto_mssg*>(
               &_mesh_proto_mssg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(mesh_proto_mssg& a, mesh_proto_mssg& b) {
    a.Swap(&b);
  }
  inline void Swap(mesh_proto_mssg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mesh_proto_mssg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mesh_proto_mssg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mesh_proto_mssg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const mesh_proto_mssg& from);
  void MergeFrom(const mesh_proto_mssg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(mesh_proto_mssg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mesh_proto_mssg";
  }
  protected:
  explicit mesh_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef mesh_proto_mssg_RENDER_MODE RENDER_MODE;
  static constexpr RENDER_MODE POINTS =
    mesh_proto_mssg_RENDER_MODE_POINTS;
  static constexpr RENDER_MODE LINE =
    mesh_proto_mssg_RENDER_MODE_LINE;
  static constexpr RENDER_MODE LINE_LOOP =
    mesh_proto_mssg_RENDER_MODE_LINE_LOOP;
  static constexpr RENDER_MODE LINE_STRIP =
    mesh_proto_mssg_RENDER_MODE_LINE_STRIP;
  static constexpr RENDER_MODE TRIANGLES =
    mesh_proto_mssg_RENDER_MODE_TRIANGLES;
  static constexpr RENDER_MODE TRIANGLE_STRIP =
    mesh_proto_mssg_RENDER_MODE_TRIANGLE_STRIP;
  static constexpr RENDER_MODE TRIANGLE_FAN =
    mesh_proto_mssg_RENDER_MODE_TRIANGLE_FAN;
  static inline bool RENDER_MODE_IsValid(int value) {
    return mesh_proto_mssg_RENDER_MODE_IsValid(value);
  }
  static constexpr RENDER_MODE RENDER_MODE_MIN =
    mesh_proto_mssg_RENDER_MODE_RENDER_MODE_MIN;
  static constexpr RENDER_MODE RENDER_MODE_MAX =
    mesh_proto_mssg_RENDER_MODE_RENDER_MODE_MAX;
  static constexpr int RENDER_MODE_ARRAYSIZE =
    mesh_proto_mssg_RENDER_MODE_RENDER_MODE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RENDER_MODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RENDER_MODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RENDER_MODE_Name.");
    return mesh_proto_mssg_RENDER_MODE_Name(enum_t_value);
  }
  static inline bool RENDER_MODE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RENDER_MODE* value) {
    return mesh_proto_mssg_RENDER_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeshNameFieldNumber = 1,
    kVerticesFieldNumber = 7,
    kNormalsFieldNumber = 8,
    kTexCoordsFieldNumber = 9,
    kIndicesFieldNumber = 10,
    kWeightsFieldNumber = 11,
    kJointsFieldNumber = 12,
    kInvBindFieldNumber = 13,
    kBoundingSphereFieldNumber = 14,
    kBaseColorFieldNumber = 16,
    kRenderModeFieldNumber = 2,
    kHashidFieldNumber = 3,
    kNumMeshesFieldNumber = 4,
    kTriCountFieldNumber = 5,
    kVertCountFieldNumber = 6,
    kRadiusFieldNumber = 15,
  };
  // bytes meshName = 1;
  void clear_meshname();
  const std::string& meshname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meshname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meshname();
  PROTOBUF_NODISCARD std::string* release_meshname();
  void set_allocated_meshname(std::string* meshname);
  private:
  const std::string& _internal_meshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meshname(const std::string& value);
  std::string* _internal_mutable_meshname();
  public:

  // .vbo_proto_mssg vertices = 7;
  bool has_vertices() const;
  private:
  bool _internal_has_vertices() const;
  public:
  void clear_vertices();
  const ::vbo_proto_mssg& vertices() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_vertices();
  ::vbo_proto_mssg* mutable_vertices();
  void set_allocated_vertices(::vbo_proto_mssg* vertices);
  private:
  const ::vbo_proto_mssg& _internal_vertices() const;
  ::vbo_proto_mssg* _internal_mutable_vertices();
  public:
  void unsafe_arena_set_allocated_vertices(
      ::vbo_proto_mssg* vertices);
  ::vbo_proto_mssg* unsafe_arena_release_vertices();

  // .vbo_proto_mssg normals = 8;
  bool has_normals() const;
  private:
  bool _internal_has_normals() const;
  public:
  void clear_normals();
  const ::vbo_proto_mssg& normals() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_normals();
  ::vbo_proto_mssg* mutable_normals();
  void set_allocated_normals(::vbo_proto_mssg* normals);
  private:
  const ::vbo_proto_mssg& _internal_normals() const;
  ::vbo_proto_mssg* _internal_mutable_normals();
  public:
  void unsafe_arena_set_allocated_normals(
      ::vbo_proto_mssg* normals);
  ::vbo_proto_mssg* unsafe_arena_release_normals();

  // .vbo_proto_mssg texCoords = 9;
  bool has_texcoords() const;
  private:
  bool _internal_has_texcoords() const;
  public:
  void clear_texcoords();
  const ::vbo_proto_mssg& texcoords() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_texcoords();
  ::vbo_proto_mssg* mutable_texcoords();
  void set_allocated_texcoords(::vbo_proto_mssg* texcoords);
  private:
  const ::vbo_proto_mssg& _internal_texcoords() const;
  ::vbo_proto_mssg* _internal_mutable_texcoords();
  public:
  void unsafe_arena_set_allocated_texcoords(
      ::vbo_proto_mssg* texcoords);
  ::vbo_proto_mssg* unsafe_arena_release_texcoords();

  // .vbo_proto_mssg indices = 10;
  bool has_indices() const;
  private:
  bool _internal_has_indices() const;
  public:
  void clear_indices();
  const ::vbo_proto_mssg& indices() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_indices();
  ::vbo_proto_mssg* mutable_indices();
  void set_allocated_indices(::vbo_proto_mssg* indices);
  private:
  const ::vbo_proto_mssg& _internal_indices() const;
  ::vbo_proto_mssg* _internal_mutable_indices();
  public:
  void unsafe_arena_set_allocated_indices(
      ::vbo_proto_mssg* indices);
  ::vbo_proto_mssg* unsafe_arena_release_indices();

  // .vbo_proto_mssg weights = 11;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::vbo_proto_mssg& weights() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_weights();
  ::vbo_proto_mssg* mutable_weights();
  void set_allocated_weights(::vbo_proto_mssg* weights);
  private:
  const ::vbo_proto_mssg& _internal_weights() const;
  ::vbo_proto_mssg* _internal_mutable_weights();
  public:
  void unsafe_arena_set_allocated_weights(
      ::vbo_proto_mssg* weights);
  ::vbo_proto_mssg* unsafe_arena_release_weights();

  // .vbo_proto_mssg joints = 12;
  bool has_joints() const;
  private:
  bool _internal_has_joints() const;
  public:
  void clear_joints();
  const ::vbo_proto_mssg& joints() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_joints();
  ::vbo_proto_mssg* mutable_joints();
  void set_allocated_joints(::vbo_proto_mssg* joints);
  private:
  const ::vbo_proto_mssg& _internal_joints() const;
  ::vbo_proto_mssg* _internal_mutable_joints();
  public:
  void unsafe_arena_set_allocated_joints(
      ::vbo_proto_mssg* joints);
  ::vbo_proto_mssg* unsafe_arena_release_joints();

  // .vbo_proto_mssg invBind = 13;
  bool has_invbind() const;
  private:
  bool _internal_has_invbind() const;
  public:
  void clear_invbind();
  const ::vbo_proto_mssg& invbind() const;
  PROTOBUF_NODISCARD ::vbo_proto_mssg* release_invbind();
  ::vbo_proto_mssg* mutable_invbind();
  void set_allocated_invbind(::vbo_proto_mssg* invbind);
  private:
  const ::vbo_proto_mssg& _internal_invbind() const;
  ::vbo_proto_mssg* _internal_mutable_invbind();
  public:
  void unsafe_arena_set_allocated_invbind(
      ::vbo_proto_mssg* invbind);
  ::vbo_proto_mssg* unsafe_arena_release_invbind();

  // .vec3_proto_mssg bounding_sphere = 14;
  bool has_bounding_sphere() const;
  private:
  bool _internal_has_bounding_sphere() const;
  public:
  void clear_bounding_sphere();
  const ::vec3_proto_mssg& bounding_sphere() const;
  PROTOBUF_NODISCARD ::vec3_proto_mssg* release_bounding_sphere();
  ::vec3_proto_mssg* mutable_bounding_sphere();
  void set_allocated_bounding_sphere(::vec3_proto_mssg* bounding_sphere);
  private:
  const ::vec3_proto_mssg& _internal_bounding_sphere() const;
  ::vec3_proto_mssg* _internal_mutable_bounding_sphere();
  public:
  void unsafe_arena_set_allocated_bounding_sphere(
      ::vec3_proto_mssg* bounding_sphere);
  ::vec3_proto_mssg* unsafe_arena_release_bounding_sphere();

  // .vec4_proto_mssg baseColor = 16;
  bool has_basecolor() const;
  private:
  bool _internal_has_basecolor() const;
  public:
  void clear_basecolor();
  const ::vec4_proto_mssg& basecolor() const;
  PROTOBUF_NODISCARD ::vec4_proto_mssg* release_basecolor();
  ::vec4_proto_mssg* mutable_basecolor();
  void set_allocated_basecolor(::vec4_proto_mssg* basecolor);
  private:
  const ::vec4_proto_mssg& _internal_basecolor() const;
  ::vec4_proto_mssg* _internal_mutable_basecolor();
  public:
  void unsafe_arena_set_allocated_basecolor(
      ::vec4_proto_mssg* basecolor);
  ::vec4_proto_mssg* unsafe_arena_release_basecolor();

  // .mesh_proto_mssg.RENDER_MODE renderMode = 2;
  void clear_rendermode();
  ::mesh_proto_mssg_RENDER_MODE rendermode() const;
  void set_rendermode(::mesh_proto_mssg_RENDER_MODE value);
  private:
  ::mesh_proto_mssg_RENDER_MODE _internal_rendermode() const;
  void _internal_set_rendermode(::mesh_proto_mssg_RENDER_MODE value);
  public:

  // uint32 hashid = 3;
  void clear_hashid();
  uint32_t hashid() const;
  void set_hashid(uint32_t value);
  private:
  uint32_t _internal_hashid() const;
  void _internal_set_hashid(uint32_t value);
  public:

  // uint32 numMeshes = 4;
  void clear_nummeshes();
  uint32_t nummeshes() const;
  void set_nummeshes(uint32_t value);
  private:
  uint32_t _internal_nummeshes() const;
  void _internal_set_nummeshes(uint32_t value);
  public:

  // uint32 triCount = 5;
  void clear_tricount();
  uint32_t tricount() const;
  void set_tricount(uint32_t value);
  private:
  uint32_t _internal_tricount() const;
  void _internal_set_tricount(uint32_t value);
  public:

  // uint32 vertCount = 6;
  void clear_vertcount();
  uint32_t vertcount() const;
  void set_vertcount(uint32_t value);
  private:
  uint32_t _internal_vertcount() const;
  void _internal_set_vertcount(uint32_t value);
  public:

  // float radius = 15;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:mesh_proto_mssg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meshname_;
    ::vbo_proto_mssg* vertices_;
    ::vbo_proto_mssg* normals_;
    ::vbo_proto_mssg* texcoords_;
    ::vbo_proto_mssg* indices_;
    ::vbo_proto_mssg* weights_;
    ::vbo_proto_mssg* joints_;
    ::vbo_proto_mssg* invbind_;
    ::vec3_proto_mssg* bounding_sphere_;
    ::vec4_proto_mssg* basecolor_;
    int rendermode_;
    uint32_t hashid_;
    uint32_t nummeshes_;
    uint32_t tricount_;
    uint32_t vertcount_;
    float radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mesh_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mesh_proto_mssg

// bytes meshName = 1;
inline void mesh_proto_mssg::clear_meshname() {
  _impl_.meshname_.ClearToEmpty();
}
inline const std::string& mesh_proto_mssg::meshname() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.meshName)
  return _internal_meshname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mesh_proto_mssg::set_meshname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meshname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.meshName)
}
inline std::string* mesh_proto_mssg::mutable_meshname() {
  std::string* _s = _internal_mutable_meshname();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.meshName)
  return _s;
}
inline const std::string& mesh_proto_mssg::_internal_meshname() const {
  return _impl_.meshname_.Get();
}
inline void mesh_proto_mssg::_internal_set_meshname(const std::string& value) {
  
  _impl_.meshname_.Set(value, GetArenaForAllocation());
}
inline std::string* mesh_proto_mssg::_internal_mutable_meshname() {
  
  return _impl_.meshname_.Mutable(GetArenaForAllocation());
}
inline std::string* mesh_proto_mssg::release_meshname() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.meshName)
  return _impl_.meshname_.Release();
}
inline void mesh_proto_mssg::set_allocated_meshname(std::string* meshname) {
  if (meshname != nullptr) {
    
  } else {
    
  }
  _impl_.meshname_.SetAllocated(meshname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meshname_.IsDefault()) {
    _impl_.meshname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.meshName)
}

// .mesh_proto_mssg.RENDER_MODE renderMode = 2;
inline void mesh_proto_mssg::clear_rendermode() {
  _impl_.rendermode_ = 0;
}
inline ::mesh_proto_mssg_RENDER_MODE mesh_proto_mssg::_internal_rendermode() const {
  return static_cast< ::mesh_proto_mssg_RENDER_MODE >(_impl_.rendermode_);
}
inline ::mesh_proto_mssg_RENDER_MODE mesh_proto_mssg::rendermode() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.renderMode)
  return _internal_rendermode();
}
inline void mesh_proto_mssg::_internal_set_rendermode(::mesh_proto_mssg_RENDER_MODE value) {
  
  _impl_.rendermode_ = value;
}
inline void mesh_proto_mssg::set_rendermode(::mesh_proto_mssg_RENDER_MODE value) {
  _internal_set_rendermode(value);
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.renderMode)
}

// uint32 hashid = 3;
inline void mesh_proto_mssg::clear_hashid() {
  _impl_.hashid_ = 0u;
}
inline uint32_t mesh_proto_mssg::_internal_hashid() const {
  return _impl_.hashid_;
}
inline uint32_t mesh_proto_mssg::hashid() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.hashid)
  return _internal_hashid();
}
inline void mesh_proto_mssg::_internal_set_hashid(uint32_t value) {
  
  _impl_.hashid_ = value;
}
inline void mesh_proto_mssg::set_hashid(uint32_t value) {
  _internal_set_hashid(value);
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.hashid)
}

// uint32 numMeshes = 4;
inline void mesh_proto_mssg::clear_nummeshes() {
  _impl_.nummeshes_ = 0u;
}
inline uint32_t mesh_proto_mssg::_internal_nummeshes() const {
  return _impl_.nummeshes_;
}
inline uint32_t mesh_proto_mssg::nummeshes() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.numMeshes)
  return _internal_nummeshes();
}
inline void mesh_proto_mssg::_internal_set_nummeshes(uint32_t value) {
  
  _impl_.nummeshes_ = value;
}
inline void mesh_proto_mssg::set_nummeshes(uint32_t value) {
  _internal_set_nummeshes(value);
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.numMeshes)
}

// uint32 triCount = 5;
inline void mesh_proto_mssg::clear_tricount() {
  _impl_.tricount_ = 0u;
}
inline uint32_t mesh_proto_mssg::_internal_tricount() const {
  return _impl_.tricount_;
}
inline uint32_t mesh_proto_mssg::tricount() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.triCount)
  return _internal_tricount();
}
inline void mesh_proto_mssg::_internal_set_tricount(uint32_t value) {
  
  _impl_.tricount_ = value;
}
inline void mesh_proto_mssg::set_tricount(uint32_t value) {
  _internal_set_tricount(value);
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.triCount)
}

// uint32 vertCount = 6;
inline void mesh_proto_mssg::clear_vertcount() {
  _impl_.vertcount_ = 0u;
}
inline uint32_t mesh_proto_mssg::_internal_vertcount() const {
  return _impl_.vertcount_;
}
inline uint32_t mesh_proto_mssg::vertcount() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.vertCount)
  return _internal_vertcount();
}
inline void mesh_proto_mssg::_internal_set_vertcount(uint32_t value) {
  
  _impl_.vertcount_ = value;
}
inline void mesh_proto_mssg::set_vertcount(uint32_t value) {
  _internal_set_vertcount(value);
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.vertCount)
}

// .vbo_proto_mssg vertices = 7;
inline bool mesh_proto_mssg::_internal_has_vertices() const {
  return this != internal_default_instance() && _impl_.vertices_ != nullptr;
}
inline bool mesh_proto_mssg::has_vertices() const {
  return _internal_has_vertices();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_vertices() const {
  const ::vbo_proto_mssg* p = _impl_.vertices_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::vertices() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.vertices)
  return _internal_vertices();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_vertices(
    ::vbo_proto_mssg* vertices) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vertices_);
  }
  _impl_.vertices_ = vertices;
  if (vertices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.vertices)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_vertices() {
  
  ::vbo_proto_mssg* temp = _impl_.vertices_;
  _impl_.vertices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_vertices() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.vertices)
  
  ::vbo_proto_mssg* temp = _impl_.vertices_;
  _impl_.vertices_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_vertices() {
  
  if (_impl_.vertices_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.vertices_ = p;
  }
  return _impl_.vertices_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_vertices() {
  ::vbo_proto_mssg* _msg = _internal_mutable_vertices();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.vertices)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_vertices(::vbo_proto_mssg* vertices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vertices_);
  }
  if (vertices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertices));
    if (message_arena != submessage_arena) {
      vertices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vertices_ = vertices;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.vertices)
}

// .vbo_proto_mssg normals = 8;
inline bool mesh_proto_mssg::_internal_has_normals() const {
  return this != internal_default_instance() && _impl_.normals_ != nullptr;
}
inline bool mesh_proto_mssg::has_normals() const {
  return _internal_has_normals();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_normals() const {
  const ::vbo_proto_mssg* p = _impl_.normals_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::normals() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.normals)
  return _internal_normals();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_normals(
    ::vbo_proto_mssg* normals) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normals_);
  }
  _impl_.normals_ = normals;
  if (normals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.normals)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_normals() {
  
  ::vbo_proto_mssg* temp = _impl_.normals_;
  _impl_.normals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_normals() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.normals)
  
  ::vbo_proto_mssg* temp = _impl_.normals_;
  _impl_.normals_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_normals() {
  
  if (_impl_.normals_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.normals_ = p;
  }
  return _impl_.normals_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_normals() {
  ::vbo_proto_mssg* _msg = _internal_mutable_normals();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.normals)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_normals(::vbo_proto_mssg* normals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normals_);
  }
  if (normals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normals));
    if (message_arena != submessage_arena) {
      normals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normals, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normals_ = normals;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.normals)
}

// .vbo_proto_mssg texCoords = 9;
inline bool mesh_proto_mssg::_internal_has_texcoords() const {
  return this != internal_default_instance() && _impl_.texcoords_ != nullptr;
}
inline bool mesh_proto_mssg::has_texcoords() const {
  return _internal_has_texcoords();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_texcoords() const {
  const ::vbo_proto_mssg* p = _impl_.texcoords_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::texcoords() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.texCoords)
  return _internal_texcoords();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_texcoords(
    ::vbo_proto_mssg* texcoords) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texcoords_);
  }
  _impl_.texcoords_ = texcoords;
  if (texcoords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.texCoords)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_texcoords() {
  
  ::vbo_proto_mssg* temp = _impl_.texcoords_;
  _impl_.texcoords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_texcoords() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.texCoords)
  
  ::vbo_proto_mssg* temp = _impl_.texcoords_;
  _impl_.texcoords_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_texcoords() {
  
  if (_impl_.texcoords_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.texcoords_ = p;
  }
  return _impl_.texcoords_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_texcoords() {
  ::vbo_proto_mssg* _msg = _internal_mutable_texcoords();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.texCoords)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_texcoords(::vbo_proto_mssg* texcoords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texcoords_);
  }
  if (texcoords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texcoords));
    if (message_arena != submessage_arena) {
      texcoords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texcoords, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.texcoords_ = texcoords;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.texCoords)
}

// .vbo_proto_mssg indices = 10;
inline bool mesh_proto_mssg::_internal_has_indices() const {
  return this != internal_default_instance() && _impl_.indices_ != nullptr;
}
inline bool mesh_proto_mssg::has_indices() const {
  return _internal_has_indices();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_indices() const {
  const ::vbo_proto_mssg* p = _impl_.indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::indices() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.indices)
  return _internal_indices();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_indices(
    ::vbo_proto_mssg* indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indices_);
  }
  _impl_.indices_ = indices;
  if (indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.indices)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_indices() {
  
  ::vbo_proto_mssg* temp = _impl_.indices_;
  _impl_.indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_indices() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.indices)
  
  ::vbo_proto_mssg* temp = _impl_.indices_;
  _impl_.indices_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_indices() {
  
  if (_impl_.indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.indices_ = p;
  }
  return _impl_.indices_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_indices() {
  ::vbo_proto_mssg* _msg = _internal_mutable_indices();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.indices)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_indices(::vbo_proto_mssg* indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indices_);
  }
  if (indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indices));
    if (message_arena != submessage_arena) {
      indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indices, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.indices_ = indices;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.indices)
}

// .vbo_proto_mssg weights = 11;
inline bool mesh_proto_mssg::_internal_has_weights() const {
  return this != internal_default_instance() && _impl_.weights_ != nullptr;
}
inline bool mesh_proto_mssg::has_weights() const {
  return _internal_has_weights();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_weights() const {
  const ::vbo_proto_mssg* p = _impl_.weights_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::weights() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.weights)
  return _internal_weights();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_weights(
    ::vbo_proto_mssg* weights) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weights_);
  }
  _impl_.weights_ = weights;
  if (weights) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.weights)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_weights() {
  
  ::vbo_proto_mssg* temp = _impl_.weights_;
  _impl_.weights_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_weights() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.weights)
  
  ::vbo_proto_mssg* temp = _impl_.weights_;
  _impl_.weights_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_weights() {
  
  if (_impl_.weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.weights_ = p;
  }
  return _impl_.weights_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_weights() {
  ::vbo_proto_mssg* _msg = _internal_mutable_weights();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.weights)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_weights(::vbo_proto_mssg* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weights_);
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weights));
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.weights)
}

// .vbo_proto_mssg joints = 12;
inline bool mesh_proto_mssg::_internal_has_joints() const {
  return this != internal_default_instance() && _impl_.joints_ != nullptr;
}
inline bool mesh_proto_mssg::has_joints() const {
  return _internal_has_joints();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_joints() const {
  const ::vbo_proto_mssg* p = _impl_.joints_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::joints() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.joints)
  return _internal_joints();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_joints(
    ::vbo_proto_mssg* joints) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joints_);
  }
  _impl_.joints_ = joints;
  if (joints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.joints)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_joints() {
  
  ::vbo_proto_mssg* temp = _impl_.joints_;
  _impl_.joints_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_joints() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.joints)
  
  ::vbo_proto_mssg* temp = _impl_.joints_;
  _impl_.joints_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_joints() {
  
  if (_impl_.joints_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.joints_ = p;
  }
  return _impl_.joints_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_joints() {
  ::vbo_proto_mssg* _msg = _internal_mutable_joints();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.joints)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_joints(::vbo_proto_mssg* joints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joints_);
  }
  if (joints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joints));
    if (message_arena != submessage_arena) {
      joints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joints, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joints_ = joints;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.joints)
}

// .vbo_proto_mssg invBind = 13;
inline bool mesh_proto_mssg::_internal_has_invbind() const {
  return this != internal_default_instance() && _impl_.invbind_ != nullptr;
}
inline bool mesh_proto_mssg::has_invbind() const {
  return _internal_has_invbind();
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::_internal_invbind() const {
  const ::vbo_proto_mssg* p = _impl_.invbind_;
  return p != nullptr ? *p : reinterpret_cast<const ::vbo_proto_mssg&>(
      ::_vbo_proto_mssg_default_instance_);
}
inline const ::vbo_proto_mssg& mesh_proto_mssg::invbind() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.invBind)
  return _internal_invbind();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_invbind(
    ::vbo_proto_mssg* invbind) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invbind_);
  }
  _impl_.invbind_ = invbind;
  if (invbind) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.invBind)
}
inline ::vbo_proto_mssg* mesh_proto_mssg::release_invbind() {
  
  ::vbo_proto_mssg* temp = _impl_.invbind_;
  _impl_.invbind_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::unsafe_arena_release_invbind() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.invBind)
  
  ::vbo_proto_mssg* temp = _impl_.invbind_;
  _impl_.invbind_ = nullptr;
  return temp;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::_internal_mutable_invbind() {
  
  if (_impl_.invbind_ == nullptr) {
    auto* p = CreateMaybeMessage<::vbo_proto_mssg>(GetArenaForAllocation());
    _impl_.invbind_ = p;
  }
  return _impl_.invbind_;
}
inline ::vbo_proto_mssg* mesh_proto_mssg::mutable_invbind() {
  ::vbo_proto_mssg* _msg = _internal_mutable_invbind();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.invBind)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_invbind(::vbo_proto_mssg* invbind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invbind_);
  }
  if (invbind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invbind));
    if (message_arena != submessage_arena) {
      invbind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invbind, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invbind_ = invbind;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.invBind)
}

// .vec3_proto_mssg bounding_sphere = 14;
inline bool mesh_proto_mssg::_internal_has_bounding_sphere() const {
  return this != internal_default_instance() && _impl_.bounding_sphere_ != nullptr;
}
inline bool mesh_proto_mssg::has_bounding_sphere() const {
  return _internal_has_bounding_sphere();
}
inline const ::vec3_proto_mssg& mesh_proto_mssg::_internal_bounding_sphere() const {
  const ::vec3_proto_mssg* p = _impl_.bounding_sphere_;
  return p != nullptr ? *p : reinterpret_cast<const ::vec3_proto_mssg&>(
      ::_vec3_proto_mssg_default_instance_);
}
inline const ::vec3_proto_mssg& mesh_proto_mssg::bounding_sphere() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.bounding_sphere)
  return _internal_bounding_sphere();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_bounding_sphere(
    ::vec3_proto_mssg* bounding_sphere) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounding_sphere_);
  }
  _impl_.bounding_sphere_ = bounding_sphere;
  if (bounding_sphere) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.bounding_sphere)
}
inline ::vec3_proto_mssg* mesh_proto_mssg::release_bounding_sphere() {
  
  ::vec3_proto_mssg* temp = _impl_.bounding_sphere_;
  _impl_.bounding_sphere_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vec3_proto_mssg* mesh_proto_mssg::unsafe_arena_release_bounding_sphere() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.bounding_sphere)
  
  ::vec3_proto_mssg* temp = _impl_.bounding_sphere_;
  _impl_.bounding_sphere_ = nullptr;
  return temp;
}
inline ::vec3_proto_mssg* mesh_proto_mssg::_internal_mutable_bounding_sphere() {
  
  if (_impl_.bounding_sphere_ == nullptr) {
    auto* p = CreateMaybeMessage<::vec3_proto_mssg>(GetArenaForAllocation());
    _impl_.bounding_sphere_ = p;
  }
  return _impl_.bounding_sphere_;
}
inline ::vec3_proto_mssg* mesh_proto_mssg::mutable_bounding_sphere() {
  ::vec3_proto_mssg* _msg = _internal_mutable_bounding_sphere();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.bounding_sphere)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_bounding_sphere(::vec3_proto_mssg* bounding_sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounding_sphere_);
  }
  if (bounding_sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounding_sphere));
    if (message_arena != submessage_arena) {
      bounding_sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_sphere, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bounding_sphere_ = bounding_sphere;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.bounding_sphere)
}

// float radius = 15;
inline void mesh_proto_mssg::clear_radius() {
  _impl_.radius_ = 0;
}
inline float mesh_proto_mssg::_internal_radius() const {
  return _impl_.radius_;
}
inline float mesh_proto_mssg::radius() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.radius)
  return _internal_radius();
}
inline void mesh_proto_mssg::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void mesh_proto_mssg::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:mesh_proto_mssg.radius)
}

// .vec4_proto_mssg baseColor = 16;
inline bool mesh_proto_mssg::_internal_has_basecolor() const {
  return this != internal_default_instance() && _impl_.basecolor_ != nullptr;
}
inline bool mesh_proto_mssg::has_basecolor() const {
  return _internal_has_basecolor();
}
inline const ::vec4_proto_mssg& mesh_proto_mssg::_internal_basecolor() const {
  const ::vec4_proto_mssg* p = _impl_.basecolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::vec4_proto_mssg&>(
      ::_vec4_proto_mssg_default_instance_);
}
inline const ::vec4_proto_mssg& mesh_proto_mssg::basecolor() const {
  // @@protoc_insertion_point(field_get:mesh_proto_mssg.baseColor)
  return _internal_basecolor();
}
inline void mesh_proto_mssg::unsafe_arena_set_allocated_basecolor(
    ::vec4_proto_mssg* basecolor) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basecolor_);
  }
  _impl_.basecolor_ = basecolor;
  if (basecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mesh_proto_mssg.baseColor)
}
inline ::vec4_proto_mssg* mesh_proto_mssg::release_basecolor() {
  
  ::vec4_proto_mssg* temp = _impl_.basecolor_;
  _impl_.basecolor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vec4_proto_mssg* mesh_proto_mssg::unsafe_arena_release_basecolor() {
  // @@protoc_insertion_point(field_release:mesh_proto_mssg.baseColor)
  
  ::vec4_proto_mssg* temp = _impl_.basecolor_;
  _impl_.basecolor_ = nullptr;
  return temp;
}
inline ::vec4_proto_mssg* mesh_proto_mssg::_internal_mutable_basecolor() {
  
  if (_impl_.basecolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::vec4_proto_mssg>(GetArenaForAllocation());
    _impl_.basecolor_ = p;
  }
  return _impl_.basecolor_;
}
inline ::vec4_proto_mssg* mesh_proto_mssg::mutable_basecolor() {
  ::vec4_proto_mssg* _msg = _internal_mutable_basecolor();
  // @@protoc_insertion_point(field_mutable:mesh_proto_mssg.baseColor)
  return _msg;
}
inline void mesh_proto_mssg::set_allocated_basecolor(::vec4_proto_mssg* basecolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basecolor_);
  }
  if (basecolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecolor));
    if (message_arena != submessage_arena) {
      basecolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basecolor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basecolor_ = basecolor;
  // @@protoc_insertion_point(field_set_allocated:mesh_proto_mssg.baseColor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mesh_proto_mssg_RENDER_MODE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mesh_5fproto_2eproto
