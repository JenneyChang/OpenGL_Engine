// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hierarchy_proto.proto

#include "hierarchy_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR hierarchy_proto_mssg::hierarchy_proto_mssg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.origlist_)*/{}
  , /*decltype(_impl_.orderedlist_)*/{}
  , /*decltype(_impl_.correctedlist_)*/{}
  , /*decltype(_impl_.hierarchytable_)*/{}
  , /*decltype(_impl_._hierarchytable_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skelsize_)*/0
  , /*decltype(_impl_.hierarchydepth_)*/0
  , /*decltype(_impl_.tablesize_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct hierarchy_proto_mssgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR hierarchy_proto_mssgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~hierarchy_proto_mssgDefaultTypeInternal() {}
  union {
    hierarchy_proto_mssg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 hierarchy_proto_mssgDefaultTypeInternal _hierarchy_proto_mssg_default_instance_;

// ===================================================================

class hierarchy_proto_mssg::_Internal {
 public:
};

void hierarchy_proto_mssg::clear_origlist() {
  _impl_.origlist_.Clear();
}
void hierarchy_proto_mssg::clear_orderedlist() {
  _impl_.orderedlist_.Clear();
}
void hierarchy_proto_mssg::clear_correctedlist() {
  _impl_.correctedlist_.Clear();
}
hierarchy_proto_mssg::hierarchy_proto_mssg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hierarchy_proto_mssg)
}
hierarchy_proto_mssg::hierarchy_proto_mssg(const hierarchy_proto_mssg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  hierarchy_proto_mssg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.origlist_){from._impl_.origlist_}
    , decltype(_impl_.orderedlist_){from._impl_.orderedlist_}
    , decltype(_impl_.correctedlist_){from._impl_.correctedlist_}
    , decltype(_impl_.hierarchytable_){from._impl_.hierarchytable_}
    , /*decltype(_impl_._hierarchytable_cached_byte_size_)*/{0}
    , decltype(_impl_.skelsize_){}
    , decltype(_impl_.hierarchydepth_){}
    , decltype(_impl_.tablesize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.skelsize_, &from._impl_.skelsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tablesize_) -
    reinterpret_cast<char*>(&_impl_.skelsize_)) + sizeof(_impl_.tablesize_));
  // @@protoc_insertion_point(copy_constructor:hierarchy_proto_mssg)
}

inline void hierarchy_proto_mssg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.origlist_){arena}
    , decltype(_impl_.orderedlist_){arena}
    , decltype(_impl_.correctedlist_){arena}
    , decltype(_impl_.hierarchytable_){arena}
    , /*decltype(_impl_._hierarchytable_cached_byte_size_)*/{0}
    , decltype(_impl_.skelsize_){0}
    , decltype(_impl_.hierarchydepth_){0}
    , decltype(_impl_.tablesize_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

hierarchy_proto_mssg::~hierarchy_proto_mssg() {
  // @@protoc_insertion_point(destructor:hierarchy_proto_mssg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void hierarchy_proto_mssg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.origlist_.~RepeatedPtrField();
  _impl_.orderedlist_.~RepeatedPtrField();
  _impl_.correctedlist_.~RepeatedPtrField();
  _impl_.hierarchytable_.~RepeatedField();
}

void hierarchy_proto_mssg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void hierarchy_proto_mssg::Clear() {
// @@protoc_insertion_point(message_clear_start:hierarchy_proto_mssg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.origlist_.Clear();
  _impl_.orderedlist_.Clear();
  _impl_.correctedlist_.Clear();
  _impl_.hierarchytable_.Clear();
  ::memset(&_impl_.skelsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tablesize_) -
      reinterpret_cast<char*>(&_impl_.skelsize_)) + sizeof(_impl_.tablesize_));
  _internal_metadata_.Clear<std::string>();
}

const char* hierarchy_proto_mssg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 skelSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skelsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 hierarchyDepth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hierarchydepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tableSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tablesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skeleton_proto_mssg origList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_origlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .skeleton_proto_mssg orderedList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orderedlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .skeleton_proto_mssg correctedList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_correctedlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 hierarchyTable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_hierarchytable(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_hierarchytable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* hierarchy_proto_mssg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hierarchy_proto_mssg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 skelSize = 1;
  if (this->_internal_skelsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_skelsize(), target);
  }

  // sint32 hierarchyDepth = 2;
  if (this->_internal_hierarchydepth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_hierarchydepth(), target);
  }

  // uint32 tableSize = 3;
  if (this->_internal_tablesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tablesize(), target);
  }

  // repeated .skeleton_proto_mssg origList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_origlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_origlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .skeleton_proto_mssg orderedList = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orderedlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_orderedlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .skeleton_proto_mssg correctedList = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_correctedlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_correctedlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated sint32 hierarchyTable = 7;
  {
    int byte_size = _impl_._hierarchytable_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          7, _internal_hierarchytable(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hierarchy_proto_mssg)
  return target;
}

size_t hierarchy_proto_mssg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hierarchy_proto_mssg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skeleton_proto_mssg origList = 4;
  total_size += 1UL * this->_internal_origlist_size();
  for (const auto& msg : this->_impl_.origlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .skeleton_proto_mssg orderedList = 5;
  total_size += 1UL * this->_internal_orderedlist_size();
  for (const auto& msg : this->_impl_.orderedlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .skeleton_proto_mssg correctedList = 6;
  total_size += 1UL * this->_internal_correctedlist_size();
  for (const auto& msg : this->_impl_.correctedlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated sint32 hierarchyTable = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.hierarchytable_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hierarchytable_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // sint32 skelSize = 1;
  if (this->_internal_skelsize() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_skelsize());
  }

  // sint32 hierarchyDepth = 2;
  if (this->_internal_hierarchydepth() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_hierarchydepth());
  }

  // uint32 tableSize = 3;
  if (this->_internal_tablesize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tablesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hierarchy_proto_mssg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const hierarchy_proto_mssg*>(
      &from));
}

void hierarchy_proto_mssg::MergeFrom(const hierarchy_proto_mssg& from) {
  hierarchy_proto_mssg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:hierarchy_proto_mssg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.origlist_.MergeFrom(from._impl_.origlist_);
  _this->_impl_.orderedlist_.MergeFrom(from._impl_.orderedlist_);
  _this->_impl_.correctedlist_.MergeFrom(from._impl_.correctedlist_);
  _this->_impl_.hierarchytable_.MergeFrom(from._impl_.hierarchytable_);
  if (from._internal_skelsize() != 0) {
    _this->_internal_set_skelsize(from._internal_skelsize());
  }
  if (from._internal_hierarchydepth() != 0) {
    _this->_internal_set_hierarchydepth(from._internal_hierarchydepth());
  }
  if (from._internal_tablesize() != 0) {
    _this->_internal_set_tablesize(from._internal_tablesize());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void hierarchy_proto_mssg::CopyFrom(const hierarchy_proto_mssg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hierarchy_proto_mssg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hierarchy_proto_mssg::IsInitialized() const {
  return true;
}

void hierarchy_proto_mssg::InternalSwap(hierarchy_proto_mssg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.origlist_.InternalSwap(&other->_impl_.origlist_);
  _impl_.orderedlist_.InternalSwap(&other->_impl_.orderedlist_);
  _impl_.correctedlist_.InternalSwap(&other->_impl_.correctedlist_);
  _impl_.hierarchytable_.InternalSwap(&other->_impl_.hierarchytable_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hierarchy_proto_mssg, _impl_.tablesize_)
      + sizeof(hierarchy_proto_mssg::_impl_.tablesize_)
      - PROTOBUF_FIELD_OFFSET(hierarchy_proto_mssg, _impl_.skelsize_)>(
          reinterpret_cast<char*>(&_impl_.skelsize_),
          reinterpret_cast<char*>(&other->_impl_.skelsize_));
}

std::string hierarchy_proto_mssg::GetTypeName() const {
  return "hierarchy_proto_mssg";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hierarchy_proto_mssg*
Arena::CreateMaybeMessage< ::hierarchy_proto_mssg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hierarchy_proto_mssg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
